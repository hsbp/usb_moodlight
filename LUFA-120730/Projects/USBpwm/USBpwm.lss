
USBpwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  0000198a  00001a1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000198a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000128  00800138  00800138  00001a56  2**0
                  ALLOC
  3 .stab         00003924  00000000  00000000  00001a58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000582  00000000  00000000  0000537c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000570  00000000  00000000  00005900  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000883a  00000000  00000000  00005e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000219e  00000000  00000000  0000e6aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000d187  00000000  00000000  00010848  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e84  00000000  00000000  0001d9d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003884  00000000  00000000  0001e854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005356  00000000  00000000  000220d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 00139f9c  00000000  00000000  0002742e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000770  00000000  00000000  001613ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
       0:	d1 c0       	rjmp	.+418    	; 0x1a4 <__ctors_end>
       2:	00 00       	nop
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
       4:	eb c0       	rjmp	.+470    	; 0x1dc <__bad_interrupt>
       6:	00 00       	nop
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
       8:	e9 c0       	rjmp	.+466    	; 0x1dc <__bad_interrupt>
       a:	00 00       	nop
       c:	e7 c0       	rjmp	.+462    	; 0x1dc <__bad_interrupt>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
       e:	00 00       	nop
      10:	e5 c0       	rjmp	.+458    	; 0x1dc <__bad_interrupt>
      12:	00 00       	nop
      14:	e3 c0       	rjmp	.+454    	; 0x1dc <__bad_interrupt>
      16:	00 00       	nop
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
      18:	e1 c0       	rjmp	.+450    	; 0x1dc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	df c0       	rjmp	.+446    	; 0x1dc <__bad_interrupt>
      1e:	00 00       	nop
      20:	dd c0       	rjmp	.+442    	; 0x1dc <__bad_interrupt>
	while (UDCON & (1 << RMWKUP));
      22:	00 00       	nop
      24:	db c0       	rjmp	.+438    	; 0x1dc <__bad_interrupt>
      26:	00 00       	nop
      28:	d9 c0       	rjmp	.+434    	; 0x1dc <__bad_interrupt>
}
      2a:	00 00       	nop
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
      2c:	83 c4       	rjmp	.+2310   	; 0x934 <__vector_11>
      2e:	00 00       	nop
      30:	25 c5       	rjmp	.+2634   	; 0xa7c <__vector_12>

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
      32:	00 00       	nop
      34:	d3 c0       	rjmp	.+422    	; 0x1dc <__bad_interrupt>
      36:	00 00       	nop
      38:	d1 c0       	rjmp	.+418    	; 0x1dc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	cf c0       	rjmp	.+414    	; 0x1dc <__bad_interrupt>
				*BytesRem      -= CurrDescriptorSize;
      3e:	00 00       	nop
      40:	cd c0       	rjmp	.+410    	; 0x1dc <__bad_interrupt>
      42:	00 00       	nop
      44:	cb c0       	rjmp	.+406    	; 0x1dc <__bad_interrupt>
      46:	00 00       	nop
      48:	c9 c0       	rjmp	.+402    	; 0x1dc <__bad_interrupt>
      4a:	00 00       	nop
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
      4c:	c7 c0       	rjmp	.+398    	; 0x1dc <__bad_interrupt>
      4e:	00 00       	nop
      50:	c5 c0       	rjmp	.+394    	; 0x1dc <__bad_interrupt>
      52:	00 00       	nop
      54:	c3 c0       	rjmp	.+390    	; 0x1dc <__bad_interrupt>
      56:	00 00       	nop
      58:	c1 c0       	rjmp	.+386    	; 0x1dc <__bad_interrupt>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
      5a:	00 00       	nop
      5c:	bf c0       	rjmp	.+382    	; 0x1dc <__bad_interrupt>
			{
				*CurrConfigLoc = PrevDescLoc;
      5e:	00 00       	nop
      60:	bd c0       	rjmp	.+378    	; 0x1dc <__bad_interrupt>
      62:	00 00       	nop
				*BytesRem      = PrevBytesRem;
      64:	bb c0       	rjmp	.+374    	; 0x1dc <__bad_interrupt>
      66:	00 00       	nop
      68:	b9 c0       	rjmp	.+370    	; 0x1dc <__bad_interrupt>
      6a:	00 00       	nop
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
      6c:	b7 c0       	rjmp	.+366    	; 0x1dc <__bad_interrupt>
      6e:	00 00       	nop
      70:	b5 c0       	rjmp	.+362    	; 0x1dc <__bad_interrupt>
      72:	00 00       	nop
      74:	07 63       	ori	r16, 0x37	; 55

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
      76:	42 36       	cpi	r20, 0x62	; 98
}
      78:	b7 9b       	sbis	0x16, 7	; 22
      7a:	d8 a7       	std	Y+40, r29	; 0x28
      7c:	1a 39       	cpi	r17, 0x9A	; 154
      7e:	68 56       	subi	r22, 0x68	; 104
      80:	18 ae       	std	Y+56, r1	; 0x38
      82:	ba ab       	std	Y+50, r27	; 0x32
      84:	55 8c       	ldd	r5, Z+29	; 0x1d
      86:	1d 3c       	cpi	r17, 0xCD	; 205
      88:	b7 cc       	rjmp	.-1682   	; 0xfffff9f8 <__eeprom_end+0xff7ef9f8>
      8a:	57 63       	ori	r21, 0x37	; 55
      8c:	bd 6d       	ori	r27, 0xDD	; 221
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
      8e:	ed fd       	.word	0xfded	; ????
      90:	75 3e       	cpi	r23, 0xE5	; 229
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
      92:	f6 17       	cp	r31, r22
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
      94:	72 31       	cpi	r23, 0x12	; 18
      96:	bf 00       	.word	0x00bf	; ????
      98:	00 00       	nop
      9a:	80 3f       	cpi	r24, 0xF0	; 240
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
      9c:	08 00       	.word	0x0008	; ????

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9e:	00 00       	nop
      a0:	be 92       	st	-X, r11
      a2:	24 49       	sbci	r18, 0x94	; 148
      a4:	12 3e       	cpi	r17, 0xE2	; 226
      a6:	ab aa       	std	Y+51, r10	; 0x33
      a8:	aa 2a       	or	r10, r26
      aa:	be cd       	rjmp	.-1156   	; 0xfffffc28 <__eeprom_end+0xff7efc28>
      ac:	cc cc       	rjmp	.-1640   	; 0xfffffa46 <__eeprom_end+0xff7efa46>
      ae:	4c 3e       	cpi	r20, 0xEC	; 236
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
      b0:	00 00       	nop
      b2:	00 80       	ld	r0, Z
      b4:	be ab       	std	Y+54, r27	; 0x36
      b6:	aa aa       	std	Y+50, r10	; 0x32

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	aa 3e       	cpi	r26, 0xEA	; 234
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	bf 00       	.word	0x00bf	; ????
      c0:	00 00       	nop
      c2:	80 3f       	cpi	r24, 0xF0	; 240
      c4:	00 00       	nop
      c6:	00 00       	nop
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
      c8:	00 08       	sbc	r0, r0
      ca:	41 78       	andi	r20, 0x81	; 129
      cc:	d3 bb       	out	0x13, r29	; 19
      ce:	43 87       	std	Z+11, r20	; 0x0b
      d0:	d1 13       	cpse	r29, r17
      d2:	3d 19       	sub	r19, r13
      d4:	0e 3c       	cpi	r16, 0xCE	; 206
      d6:	c3 bd       	out	0x23, r28	; 35
      d8:	42 82       	std	Z+2, r4	; 0x02
      da:	ad 2b       	or	r26, r29
      dc:	3e 68       	ori	r19, 0x8E	; 142
      de:	ec 82       	std	Y+4, r14	; 0x04
      e0:	76 be       	out	0x36, r7	; 54
      e2:	d9 8f       	std	Y+25, r29	; 0x19
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      e4:	e1 a9       	ldd	r30, Z+49	; 0x31
	{
		uint8_t  HIDReportItem  = *ReportData;
      e6:	3e 4c       	sbci	r19, 0xCE	; 206
      e8:	80 ef       	ldi	r24, 0xF0	; 240
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;
      ea:	ff be       	out	0x3f, r15	; 63
      ec:	01 c4       	rjmp	.+2050   	; 0x8f0 <USB_ResetInterface+0x4a>
      ee:	ff 7f       	andi	r31, 0xFF	; 255
      f0:	3f 00       	.word	0x003f	; ????
      f2:	00 00       	nop
      f4:	00 00       	nop

000000f6 <__c.3901>:
      f6:	20 48 65 6c 6c 6f 20 57 6f 72 6c 64 0d 0a 00         Hello World...

00000105 <ProductString>:

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     105:	30 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     0.L.U.F.A. .U.S.
     115:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
     125:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

00000135 <ManufacturerString>:
	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;
     135:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     145:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000014f <LanguageString>:
     14f:	04 03 09 04                                         ....

00000153 <ConfigurationDescriptor>:
     153:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     163:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     173:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     183:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000191 <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     191:	12 01 10 01 02 00 00 08 eb 03 4b 20 00 00 01 02     ..........K ....
     1a1:	dc 01 00                                            ...

000001a4 <__ctors_end>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     1a4:	11 24       	eor	r1, r1
     1a6:	1f be       	out	0x3f, r1	; 63
     1a8:	cf ef       	ldi	r28, 0xFF	; 255
     1aa:	d4 e0       	ldi	r29, 0x04	; 4
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	cd bf       	out	0x3d, r28	; 61

000001b0 <__do_copy_data>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	a0 e0       	ldi	r26, 0x00	; 0
				ReportData     += 4;
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	ea e8       	ldi	r30, 0x8A	; 138
     1b8:	f9 e1       	ldi	r31, 0x19	; 25
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__do_copy_data+0x10>
				break;
     1bc:	05 90       	lpm	r0, Z+
			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     1be:	0d 92       	st	X+, r0
     1c0:	a8 33       	cpi	r26, 0x38	; 56
     1c2:	b1 07       	cpc	r27, r17
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <__do_copy_data+0xc>

000001c6 <__do_clear_bss>:
     1c6:	12 e0       	ldi	r17, 0x02	; 2
     1c8:	a8 e3       	ldi	r26, 0x38	; 56
     1ca:	b1 e0       	ldi	r27, 0x01	; 1
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <.do_clear_bss_start>

000001ce <.do_clear_bss_loop>:
     1ce:	1d 92       	st	X+, r1

000001d0 <.do_clear_bss_start>:
     1d0:	a0 36       	cpi	r26, 0x60	; 96
     1d2:	b1 07       	cpc	r27, r17
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <.do_clear_bss_loop>
     1d6:	05 d2       	rcall	.+1034   	; 0x5e2 <main>
     1d8:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <_exit>

000001dc <__bad_interrupt>:
     1dc:	11 cf       	rjmp	.-478    	; 0x0 <__vectors>

000001de <RingBuffer_Insert>:
     1de:	fc 01       	movw	r30, r24
     1e0:	a0 81       	ld	r26, Z
     1e2:	b1 81       	ldd	r27, Z+1	; 0x01
     1e4:	6c 93       	st	X, r22
     1e6:	80 81       	ld	r24, Z
     1e8:	91 81       	ldd	r25, Z+1	; 0x01
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	91 83       	std	Z+1, r25	; 0x01
     1ee:	80 83       	st	Z, r24
     1f0:	26 81       	ldd	r18, Z+6	; 0x06
     1f2:	37 81       	ldd	r19, Z+7	; 0x07
     1f4:	82 17       	cp	r24, r18
				ReportSize     -= 2;
     1f6:	93 07       	cpc	r25, r19
     1f8:	21 f4       	brne	.+8      	; 0x202 <RingBuffer_Insert+0x24>
     1fa:	84 81       	ldd	r24, Z+4	; 0x04
     1fc:	95 81       	ldd	r25, Z+5	; 0x05
     1fe:	91 83       	std	Z+1, r25	; 0x01
     200:	80 83       	st	Z, r24
     202:	2f b7       	in	r18, 0x3f	; 63
     204:	f8 94       	cli
     206:	82 85       	ldd	r24, Z+10	; 0x0a
     208:	93 85       	ldd	r25, Z+11	; 0x0b
				ReportData     += 2;
     20a:	01 96       	adiw	r24, 0x01	; 1
     20c:	93 87       	std	Z+11, r25	; 0x0b
     20e:	82 87       	std	Z+10, r24	; 0x0a
     210:	2f bf       	out	0x3f, r18	; 63
				break;
     212:	08 95       	ret

00000214 <RingBuffer_Remove>:
			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     214:	fc 01       	movw	r30, r24
     216:	a2 81       	ldd	r26, Z+2	; 0x02
     218:	b3 81       	ldd	r27, Z+3	; 0x03
     21a:	8d 91       	ld	r24, X+
     21c:	b3 83       	std	Z+3, r27	; 0x03
     21e:	a2 83       	std	Z+2, r26	; 0x02
     220:	26 81       	ldd	r18, Z+6	; 0x06
				ReportSize     -= 1;
     222:	37 81       	ldd	r19, Z+7	; 0x07
     224:	a2 17       	cp	r26, r18
     226:	b3 07       	cpc	r27, r19
     228:	21 f4       	brne	.+8      	; 0x232 <RingBuffer_Remove+0x1e>
     22a:	24 81       	ldd	r18, Z+4	; 0x04
     22c:	35 81       	ldd	r19, Z+5	; 0x05
     22e:	33 83       	std	Z+3, r19	; 0x03
     230:	22 83       	std	Z+2, r18	; 0x02
     232:	9f b7       	in	r25, 0x3f	; 63
				ReportData     += 1;
     234:	f8 94       	cli
     236:	22 85       	ldd	r18, Z+10	; 0x0a
     238:	33 85       	ldd	r19, Z+11	; 0x0b
     23a:	21 50       	subi	r18, 0x01	; 1
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     23c:	30 40       	sbci	r19, 0x00	; 0
     23e:	33 87       	std	Z+11, r19	; 0x0b
     240:	22 87       	std	Z+10, r18	; 0x0a
     242:	9f bf       	out	0x3f, r25	; 63
     244:	08 95       	ret

00000246 <USB_sendstring_P>:
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	ec 01       	movw	r28, r24
     24c:	03 c0       	rjmp	.+6      	; 0x254 <USB_sendstring_P+0xe>
     24e:	84 ec       	ldi	r24, 0xC4	; 196
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	c5 df       	rcall	.-118    	; 0x1de <RingBuffer_Insert>
     254:	fe 01       	movw	r30, r28
     256:	21 96       	adiw	r28, 0x01	; 1
     258:	64 91       	lpm	r22, Z
     25a:	66 23       	and	r22, r22
     25c:	c1 f7       	brne	.-16     	; 0x24e <USB_sendstring_P+0x8>
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <USB_sendbyte>:
     264:	68 2f       	mov	r22, r24
     266:	84 ec       	ldi	r24, 0xC4	; 196
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	b9 cf       	rjmp	.-142    	; 0x1de <RingBuffer_Insert>

0000026c <helloworld>:
     26c:	cf 93       	push	r28
     26e:	c0 91 50 02 	lds	r28, 0x0250
     272:	8c 2f       	mov	r24, r28
     274:	80 5d       	subi	r24, 0xD0	; 208
     276:	f6 df       	rcall	.-20     	; 0x264 <USB_sendbyte>
     278:	86 ef       	ldi	r24, 0xF6	; 246
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	e4 df       	rcall	.-56     	; 0x246 <USB_sendstring_P>
     27e:	8c 2f       	mov	r24, r28
     280:	8f 5f       	subi	r24, 0xFF	; 255
     282:	6a e0       	ldi	r22, 0x0A	; 10
     284:	0e 94 b7 0c 	call	0x196e	; 0x196e <__udivmodqi4>
     288:	90 93 50 02 	sts	0x0250, r25
     28c:	cf 91       	pop	r28
     28e:	08 95       	ret

00000290 <init>:
     290:	f8 94       	cli
     292:	e1 e6       	ldi	r30, 0x61	; 97
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 e8       	ldi	r24, 0x80	; 128
     298:	80 83       	st	Z, r24
     29a:	10 82       	st	Z, r1
     29c:	e0 e8       	ldi	r30, 0x80	; 128
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	88 ea       	ldi	r24, 0xA8	; 168
     2a2:	80 83       	st	Z, r24
     2a4:	80 81       	ld	r24, Z
     2a6:	82 60       	ori	r24, 0x02	; 2
     2a8:	80 83       	st	Z, r24
     2aa:	e1 e8       	ldi	r30, 0x81	; 129
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	88 61       	ori	r24, 0x18	; 24
     2b2:	80 83       	st	Z, r24
     2b4:	80 81       	ld	r24, Z
     2b6:	81 60       	ori	r24, 0x01	; 1
     2b8:	80 83       	st	Z, r24
     2ba:	8f ef       	ldi	r24, 0xFF	; 255
     2bc:	9f ef       	ldi	r25, 0xFF	; 255
     2be:	90 93 87 00 	sts	0x0087, r25
     2c2:	80 93 86 00 	sts	0x0086, r24
     2c6:	3e 9a       	sbi	0x07, 6	; 7
     2c8:	3d 9a       	sbi	0x07, 5	; 7
     2ca:	27 9a       	sbi	0x04, 7	; 4
     2cc:	82 e4       	ldi	r24, 0x42	; 66
     2ce:	80 bf       	out	0x30, r24	; 48
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	80 93 7d 00 	sts	0x007D, r24
     2d6:	84 e0       	ldi	r24, 0x04	; 4
     2d8:	80 93 7f 00 	sts	0x007F, r24
     2dc:	80 b7       	in	r24, 0x30	; 48
     2de:	80 61       	ori	r24, 0x10	; 16
     2e0:	80 bf       	out	0x30, r24	; 48
     2e2:	08 95       	ret

000002e4 <setcolor>:
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	eb 01       	movw	r28, r22
     2ee:	8a 01       	movw	r16, r20
     2f0:	bc 01       	movw	r22, r24
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 b9 09 	call	0x1372	; 0x1372 <__floatunsisf>
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	3f ef       	ldi	r19, 0xFF	; 255
     2fe:	4f e7       	ldi	r20, 0x7F	; 127
     300:	57 e4       	ldi	r21, 0x47	; 71
     302:	a3 d7       	rcall	.+3910   	; 0x124a <__divsf3>
     304:	2d ec       	ldi	r18, 0xCD	; 205
     306:	3c ec       	ldi	r19, 0xCC	; 204
     308:	4c e0       	ldi	r20, 0x0C	; 12
     30a:	50 e4       	ldi	r21, 0x40	; 64
     30c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <pow>
     310:	46 2f       	mov	r20, r22
     312:	57 2f       	mov	r21, r23
     314:	68 2f       	mov	r22, r24
     316:	79 2f       	mov	r23, r25
     318:	cb 01       	movw	r24, r22
     31a:	ba 01       	movw	r22, r20
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	3f ef       	ldi	r19, 0xFF	; 255
     320:	4f e7       	ldi	r20, 0x7F	; 127
     322:	57 e4       	ldi	r21, 0x47	; 71
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     324:	0e 94 47 0a 	call	0x148e	; 0x148e <__mulsf3>
     328:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <round>
     32c:	f6 d7       	rcall	.+4076   	; 0x131a <__fixunssfsi>
     32e:	dc 01       	movw	r26, r24
     330:	cb 01       	movw	r24, r22
     332:	90 93 89 00 	sts	0x0089, r25
     336:	80 93 88 00 	sts	0x0088, r24
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     33a:	be 01       	movw	r22, r28
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 b9 09 	call	0x1372	; 0x1372 <__floatunsisf>
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	3f ef       	ldi	r19, 0xFF	; 255
     348:	4f e7       	ldi	r20, 0x7F	; 127
     34a:	57 e4       	ldi	r21, 0x47	; 71
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     34c:	7e d7       	rcall	.+3836   	; 0x124a <__divsf3>
				break;
     34e:	2d ec       	ldi	r18, 0xCD	; 205
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     350:	3c ec       	ldi	r19, 0xCC	; 204
     352:	4c e0       	ldi	r20, 0x0C	; 12
     354:	50 e4       	ldi	r21, 0x40	; 64
     356:	0e 94 b2 0a 	call	0x1564	; 0x1564 <pow>
     35a:	46 2f       	mov	r20, r22
     35c:	57 2f       	mov	r21, r23
     35e:	68 2f       	mov	r22, r24
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     360:	79 2f       	mov	r23, r25
     362:	cb 01       	movw	r24, r22
				break;
     364:	ba 01       	movw	r22, r20
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	3f ef       	ldi	r19, 0xFF	; 255
     36a:	4f e7       	ldi	r20, 0x7F	; 127
     36c:	57 e4       	ldi	r21, 0x47	; 71
     36e:	0e 94 47 0a 	call	0x148e	; 0x148e <__mulsf3>
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     372:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <round>
     376:	d1 d7       	rcall	.+4002   	; 0x131a <__fixunssfsi>
     378:	dc 01       	movw	r26, r24
     37a:	cb 01       	movw	r24, r22
				break;
     37c:	90 93 8b 00 	sts	0x008B, r25
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     380:	80 93 8a 00 	sts	0x008A, r24
     384:	b8 01       	movw	r22, r16
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	f3 d7       	rcall	.+4070   	; 0x1372 <__floatunsisf>
				break;
     38c:	20 e0       	ldi	r18, 0x00	; 0
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     38e:	3f ef       	ldi	r19, 0xFF	; 255
     390:	4f e7       	ldi	r20, 0x7F	; 127
     392:	57 e4       	ldi	r21, 0x47	; 71
     394:	5a d7       	rcall	.+3764   	; 0x124a <__divsf3>
     396:	2d ec       	ldi	r18, 0xCD	; 205
				break;
     398:	3c ec       	ldi	r19, 0xCC	; 204
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     39a:	4c e0       	ldi	r20, 0x0C	; 12
     39c:	50 e4       	ldi	r21, 0x40	; 64
     39e:	0e 94 b2 0a 	call	0x1564	; 0x1564 <pow>
     3a2:	46 2f       	mov	r20, r22
     3a4:	57 2f       	mov	r21, r23
     3a6:	68 2f       	mov	r22, r24
				break;
     3a8:	79 2f       	mov	r23, r25
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     3aa:	cb 01       	movw	r24, r22
     3ac:	ba 01       	movw	r22, r20
				break;
     3ae:	20 e0       	ldi	r18, 0x00	; 0
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     3b0:	3f ef       	ldi	r19, 0xFF	; 255
     3b2:	4f e7       	ldi	r20, 0x7F	; 127
     3b4:	57 e4       	ldi	r21, 0x47	; 71
     3b6:	0e 94 47 0a 	call	0x148e	; 0x148e <__mulsf3>
     3ba:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <round>
				break;
     3be:	ad d7       	rcall	.+3930   	; 0x131a <__fixunssfsi>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     3c0:	dc 01       	movw	r26, r24
     3c2:	cb 01       	movw	r24, r22
				break;
     3c4:	90 93 8d 00 	sts	0x008D, r25
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     3c8:	80 93 8c 00 	sts	0x008C, r24
     3cc:	df 91       	pop	r29
				break;
     3ce:	cf 91       	pop	r28
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	08 95       	ret

000003d6 <lowvoltage>:

				if (ParserData->UsingReportIDs)
     3d6:	00 b6       	in	r0, 0x30	; 48
     3d8:	04 fe       	sbrs	r0, 4
     3da:	06 c0       	rjmp	.+12     	; 0x3e8 <lowvoltage+0x12>
     3dc:	80 b7       	in	r24, 0x30	; 48
     3de:	80 61       	ori	r24, 0x10	; 16
     3e0:	80 bf       	out	0x30, r24	; 48
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	08 95       	ret
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	08 95       	ret

000003ee <mood>:
     3ee:	8d e6       	ldi	r24, 0x6D	; 109
     3f0:	80 93 51 02 	sts	0x0251, r24

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     3f4:	2f b7       	in	r18, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	80 91 42 01 	lds	r24, 0x0142
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     3fc:	90 91 43 01 	lds	r25, 0x0143
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     400:	2f bf       	out	0x3f, r18	; 63
     402:	00 97       	sbiw	r24, 0x00	; 0
     404:	29 f0       	breq	.+10     	; 0x410 <mood+0x22>
     406:	88 e3       	ldi	r24, 0x38	; 56
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	04 df       	rcall	.-504    	; 0x214 <RingBuffer_Remove>
     40c:	80 93 51 02 	sts	0x0251, r24
     410:	80 91 51 02 	lds	r24, 0x0251
     414:	82 36       	cpi	r24, 0x62	; 98
     416:	09 f4       	brne	.+2      	; 0x41a <mood+0x2c>
     418:	4b c0       	rjmp	.+150    	; 0x4b0 <mood+0xc2>
     41a:	83 36       	cpi	r24, 0x63	; 99
     41c:	40 f4       	brcc	.+16     	; 0x42e <mood+0x40>
     41e:	87 34       	cpi	r24, 0x47	; 71

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     420:	b9 f1       	breq	.+110    	; 0x490 <mood+0xa2>
     422:	82 35       	cpi	r24, 0x52	; 82
     424:	c9 f0       	breq	.+50     	; 0x458 <mood+0x6a>
     426:	82 34       	cpi	r24, 0x42	; 66
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     428:	09 f0       	breq	.+2      	; 0x42c <mood+0x3e>
     42a:	5f c0       	rjmp	.+190    	; 0x4ea <mood+0xfc>
     42c:	4d c0       	rjmp	.+154    	; 0x4c8 <mood+0xda>
     42e:	88 36       	cpi	r24, 0x68	; 104
     430:	09 f4       	brne	.+2      	; 0x434 <mood+0x46>
     432:	5a c0       	rjmp	.+180    	; 0x4e8 <mood+0xfa>
     434:	82 37       	cpi	r24, 0x72	; 114
     436:	21 f0       	breq	.+8      	; 0x440 <mood+0x52>
     438:	87 36       	cpi	r24, 0x67	; 103
     43a:	09 f0       	breq	.+2      	; 0x43e <mood+0x50>
     43c:	56 c0       	rjmp	.+172    	; 0x4ea <mood+0xfc>
     43e:	1c c0       	rjmp	.+56     	; 0x478 <mood+0x8a>
     440:	80 91 1b 01 	lds	r24, 0x011B
     444:	90 91 1c 01 	lds	r25, 0x011C
     448:	23 e0       	ldi	r18, 0x03	; 3
     44a:	88 3e       	cpi	r24, 0xE8	; 232
     44c:	92 07       	cpc	r25, r18
     44e:	08 f4       	brcc	.+2      	; 0x452 <mood+0x64>
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     450:	c3 c0       	rjmp	.+390    	; 0x5d8 <__stack+0xd9>
     452:	88 5e       	subi	r24, 0xE8	; 232
     454:	93 40       	sbci	r25, 0x03	; 3
     456:	0b c0       	rjmp	.+22     	; 0x46e <mood+0x80>
     458:	80 91 1b 01 	lds	r24, 0x011B
					}
				}

				ParserData->UsingReportIDs = true;
     45c:	90 91 1c 01 	lds	r25, 0x011C
     460:	2c ef       	ldi	r18, 0xFC	; 252
     462:	88 31       	cpi	r24, 0x18	; 24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     464:	92 07       	cpc	r25, r18
     466:	08 f0       	brcs	.+2      	; 0x46a <mood+0x7c>
     468:	b7 c0       	rjmp	.+366    	; 0x5d8 <__stack+0xd9>
     46a:	88 51       	subi	r24, 0x18	; 24
     46c:	9c 4f       	sbci	r25, 0xFC	; 252
     46e:	90 93 1c 01 	sts	0x011C, r25
				break;
     472:	80 93 1b 01 	sts	0x011B, r24
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     476:	08 95       	ret
     478:	80 91 1d 01 	lds	r24, 0x011D
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     47c:	90 91 1e 01 	lds	r25, 0x011E
     480:	23 e0       	ldi	r18, 0x03	; 3
     482:	88 3e       	cpi	r24, 0xE8	; 232
     484:	92 07       	cpc	r25, r18
     486:	08 f4       	brcc	.+2      	; 0x48a <mood+0x9c>
     488:	a7 c0       	rjmp	.+334    	; 0x5d8 <__stack+0xd9>
     48a:	88 5e       	subi	r24, 0xE8	; 232
     48c:	93 40       	sbci	r25, 0x03	; 3
     48e:	0b c0       	rjmp	.+22     	; 0x4a6 <mood+0xb8>
     490:	80 91 1d 01 	lds	r24, 0x011D
     494:	90 91 1e 01 	lds	r25, 0x011E
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     498:	2c ef       	ldi	r18, 0xFC	; 252
     49a:	88 31       	cpi	r24, 0x18	; 24
     49c:	92 07       	cpc	r25, r18
     49e:	08 f0       	brcs	.+2      	; 0x4a2 <mood+0xb4>
     4a0:	9b c0       	rjmp	.+310    	; 0x5d8 <__stack+0xd9>
     4a2:	88 51       	subi	r24, 0x18	; 24
     4a4:	9c 4f       	sbci	r25, 0xFC	; 252
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4a6:	90 93 1e 01 	sts	0x011E, r25
     4aa:	80 93 1d 01 	sts	0x011D, r24
     4ae:	08 95       	ret
     4b0:	80 91 1f 01 	lds	r24, 0x011F
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     4b4:	90 91 20 01 	lds	r25, 0x0120
     4b8:	23 e0       	ldi	r18, 0x03	; 3
     4ba:	88 3e       	cpi	r24, 0xE8	; 232
     4bc:	92 07       	cpc	r25, r18
     4be:	08 f4       	brcc	.+2      	; 0x4c2 <mood+0xd4>
     4c0:	8b c0       	rjmp	.+278    	; 0x5d8 <__stack+0xd9>
     4c2:	88 5e       	subi	r24, 0xE8	; 232
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     4c4:	93 40       	sbci	r25, 0x03	; 3
     4c6:	0b c0       	rjmp	.+22     	; 0x4de <mood+0xf0>
     4c8:	80 91 1f 01 	lds	r24, 0x011F

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     4cc:	90 91 20 01 	lds	r25, 0x0120
     4d0:	2c ef       	ldi	r18, 0xFC	; 252
     4d2:	88 31       	cpi	r24, 0x18	; 24
     4d4:	92 07       	cpc	r25, r18
     4d6:	08 f0       	brcs	.+2      	; 0x4da <mood+0xec>
     4d8:	7f c0       	rjmp	.+254    	; 0x5d8 <__stack+0xd9>
     4da:	88 51       	subi	r24, 0x18	; 24
     4dc:	9c 4f       	sbci	r25, 0xFC	; 252
     4de:	90 93 20 01 	sts	0x0120, r25
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     4e2:	80 93 1f 01 	sts	0x011F, r24
     4e6:	08 95       	ret
     4e8:	c1 de       	rcall	.-638    	; 0x26c <helloworld>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     4ea:	80 91 52 02 	lds	r24, 0x0252
     4ee:	90 91 53 02 	lds	r25, 0x0253
     4f2:	01 96       	adiw	r24, 0x01	; 1
     4f4:	90 93 53 02 	sts	0x0253, r25
     4f8:	80 93 52 02 	sts	0x0252, r24
     4fc:	8b 30       	cpi	r24, 0x0B	; 11
				}

				CurrCollectionPath->Type       = ReportItemData;
     4fe:	91 05       	cpc	r25, r1
     500:	08 f4       	brcc	.+2      	; 0x504 <__stack+0x5>
     502:	6a c0       	rjmp	.+212    	; 0x5d8 <__stack+0xd9>
     504:	20 91 1b 01 	lds	r18, 0x011B
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     508:	30 91 1c 01 	lds	r19, 0x011C
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	2d 3f       	cpi	r18, 0xFD	; 253
     510:	38 07       	cpc	r19, r24
     512:	18 f0       	brcs	.+6      	; 0x51a <__stack+0x1b>
     514:	8e ef       	ldi	r24, 0xFE	; 254

				if (UsageListSize)
     516:	9f ef       	ldi	r25, 0xFF	; 255
     518:	05 c0       	rjmp	.+10     	; 0x524 <__stack+0x25>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     51a:	23 30       	cpi	r18, 0x03	; 3
     51c:	31 05       	cpc	r19, r1
     51e:	30 f4       	brcc	.+12     	; 0x52c <__stack+0x2d>
     520:	82 e0       	ldi	r24, 0x02	; 2
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	90 93 22 01 	sts	0x0122, r25
     528:	80 93 21 01 	sts	0x0121, r24

					for (uint8_t i = 0; i < UsageListSize; i++)
					  UsageList[i] = UsageList[i + 1];
     52c:	40 91 1d 01 	lds	r20, 0x011D
     530:	50 91 1e 01 	lds	r21, 0x011E

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     534:	8f ef       	ldi	r24, 0xFF	; 255
     536:	4c 3f       	cpi	r20, 0xFC	; 252
     538:	58 07       	cpc	r21, r24
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     53a:	18 f0       	brcs	.+6      	; 0x542 <__stack+0x43>
     53c:	8d ef       	ldi	r24, 0xFD	; 253
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     53e:	9f ef       	ldi	r25, 0xFF	; 255
     540:	05 c0       	rjmp	.+10     	; 0x54c <__stack+0x4d>
     542:	44 30       	cpi	r20, 0x04	; 4
     544:	51 05       	cpc	r21, r1
     546:	30 f4       	brcc	.+12     	; 0x554 <__stack+0x55>
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	90 93 24 01 	sts	0x0124, r25
     550:	80 93 23 01 	sts	0x0123, r24
     554:	e0 91 1f 01 	lds	r30, 0x011F
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     558:	f0 91 20 01 	lds	r31, 0x0120
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	ea 3f       	cpi	r30, 0xFA	; 250
     560:	f8 07       	cpc	r31, r24
     562:	18 f0       	brcs	.+6      	; 0x56a <__stack+0x6b>
     564:	8b ef       	ldi	r24, 0xFB	; 251
     566:	9f ef       	ldi	r25, 0xFF	; 255
     568:	05 c0       	rjmp	.+10     	; 0x574 <__stack+0x75>
     56a:	e6 30       	cpi	r30, 0x06	; 6
     56c:	f1 05       	cpc	r31, r1
     56e:	30 f4       	brcc	.+12     	; 0x57c <__stack+0x7d>
     570:	85 e0       	ldi	r24, 0x05	; 5
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	90 93 26 01 	sts	0x0126, r25
     578:	80 93 25 01 	sts	0x0125, r24
     57c:	80 91 21 01 	lds	r24, 0x0121
     580:	90 91 22 01 	lds	r25, 0x0122
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     584:	82 0f       	add	r24, r18
     586:	93 1f       	adc	r25, r19
     588:	90 93 1c 01 	sts	0x011C, r25
     58c:	80 93 1b 01 	sts	0x011B, r24
     590:	60 91 23 01 	lds	r22, 0x0123
				break;
     594:	70 91 24 01 	lds	r23, 0x0124
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     598:	64 0f       	add	r22, r20
     59a:	75 1f       	adc	r23, r21
     59c:	70 93 1e 01 	sts	0x011E, r23
     5a0:	60 93 1d 01 	sts	0x011D, r22
     5a4:	40 91 25 01 	lds	r20, 0x0125
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     5a8:	50 91 26 01 	lds	r21, 0x0126
					NewReportItem.CollectionPath = CurrCollectionPath;
     5ac:	4e 0f       	add	r20, r30
     5ae:	5f 1f       	adc	r21, r31
     5b0:	50 93 20 01 	sts	0x0120, r21
     5b4:	40 93 1f 01 	sts	0x011F, r20
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     5b8:	95 de       	rcall	.-726    	; 0x2e4 <setcolor>
     5ba:	0d df       	rcall	.-486    	; 0x3d6 <lowvoltage>
     5bc:	00 97       	sbiw	r24, 0x00	; 0
     5be:	41 f0       	breq	.+16     	; 0x5d0 <__stack+0xd1>

					if (UsageListSize)
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
     5c2:	9f ef       	ldi	r25, 0xFF	; 255
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	40 e0       	ldi	r20, 0x00	; 0
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	8b de       	rcall	.-746    	; 0x2e4 <setcolor>
     5ce:	ff cf       	rjmp	.-2      	; 0x5ce <__stack+0xcf>

						for (uint8_t i = 0; i < UsageListSize; i++)
     5d0:	10 92 53 02 	sts	0x0253, r1
						  UsageList[i] = UsageList[i + 1];
     5d4:	10 92 52 02 	sts	0x0252, r1
     5d8:	08 95       	ret

000005da <SetupHardware>:

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     5da:	9d d1       	rcall	.+826    	; 0x916 <USB_Init>
     5dc:	84 e0       	ldi	r24, 0x04	; 4
     5de:	85 bd       	out	0x25, r24	; 37
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     5e0:	08 95       	ret

000005e2 <main>:
     5e2:	56 de       	rcall	.-852    	; 0x290 <init>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     5e4:	fa df       	rcall	.-12     	; 0x5da <SetupHardware>
     5e6:	e8 e3       	ldi	r30, 0x38	; 56
     5e8:	f1 e0       	ldi	r31, 0x01	; 1
     5ea:	2f b7       	in	r18, 0x3f	; 63
     5ec:	f8 94       	cli
     5ee:	84 e4       	ldi	r24, 0x44	; 68
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	91 83       	std	Z+1, r25	; 0x01
     5f4:	80 83       	st	Z, r24
     5f6:	93 83       	std	Z+3, r25	; 0x03
     5f8:	82 83       	std	Z+2, r24	; 0x02
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     5fa:	95 83       	std	Z+5, r25	; 0x05
     5fc:	84 83       	std	Z+4, r24	; 0x04
     5fe:	84 ec       	ldi	r24, 0xC4	; 196
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	97 83       	std	Z+7, r25	; 0x07
     604:	86 83       	std	Z+6, r24	; 0x06
     606:	80 e8       	ldi	r24, 0x80	; 128
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	91 87       	std	Z+9, r25	; 0x09
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     60c:	80 87       	std	Z+8, r24	; 0x08
     60e:	13 86       	std	Z+11, r1	; 0x0b
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     610:	12 86       	std	Z+10, r1	; 0x0a
     612:	2f bf       	out	0x3f, r18	; 63
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     614:	e4 ec       	ldi	r30, 0xC4	; 196
     616:	f1 e0       	ldi	r31, 0x01	; 1
     618:	4f b7       	in	r20, 0x3f	; 63
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     61a:	f8 94       	cli
     61c:	20 ed       	ldi	r18, 0xD0	; 208

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     61e:	31 e0       	ldi	r19, 0x01	; 1
     620:	31 83       	std	Z+1, r19	; 0x01
     622:	20 83       	st	Z, r18
     624:	33 83       	std	Z+3, r19	; 0x03
     626:	22 83       	std	Z+2, r18	; 0x02
     628:	35 83       	std	Z+5, r19	; 0x05
     62a:	24 83       	std	Z+4, r18	; 0x04
     62c:	20 e5       	ldi	r18, 0x50	; 80
     62e:	32 e0       	ldi	r19, 0x02	; 2
     630:	37 83       	std	Z+7, r19	; 0x07
     632:	26 83       	std	Z+6, r18	; 0x06
     634:	91 87       	std	Z+9, r25	; 0x09
     636:	80 87       	std	Z+8, r24	; 0x08
     638:	13 86       	std	Z+11, r1	; 0x0b

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     63a:	12 86       	std	Z+10, r1	; 0x0a
     63c:	4f bf       	out	0x3f, r20	; 63
     63e:	78 94       	sei
     640:	15 de       	rcall	.-982    	; 0x26c <helloworld>
     642:	d5 de       	rcall	.-598    	; 0x3ee <mood>
     644:	8f b7       	in	r24, 0x3f	; 63
     646:	f8 94       	cli
     648:	20 91 42 01 	lds	r18, 0x0142

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     64c:	30 91 43 01 	lds	r19, 0x0143
     650:	8f bf       	out	0x3f, r24	; 63
     652:	80 91 40 01 	lds	r24, 0x0140
     656:	90 91 41 01 	lds	r25, 0x0141
     65a:	28 17       	cp	r18, r24
     65c:	39 07       	cpc	r19, r25
     65e:	49 f0       	breq	.+18     	; 0x672 <main+0x90>
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	c2 d5       	rcall	.+2948   	; 0x11ea <CDC_Device_ReceiveByte>
     666:	bc 01       	movw	r22, r24
     668:	97 fd       	sbrc	r25, 7
     66a:	03 c0       	rjmp	.+6      	; 0x672 <main+0x90>
     66c:	88 e3       	ldi	r24, 0x38	; 56
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	b6 dd       	rcall	.-1172   	; 0x1de <RingBuffer_Insert>
     672:	8f b7       	in	r24, 0x3f	; 63
     674:	f8 94       	cli
     676:	c0 91 ce 01 	lds	r28, 0x01CE
     67a:	d0 91 cf 01 	lds	r29, 0x01CF
     67e:	8f bf       	out	0x3f, r24	; 63
     680:	a8 99       	sbic	0x15, 0	; 21
     682:	03 c0       	rjmp	.+6      	; 0x68a <main+0xa8>
     684:	c1 36       	cpi	r28, 0x61	; 97
     686:	d1 05       	cpc	r29, r1
     688:	90 f0       	brcs	.+36     	; 0x6ae <main+0xcc>
     68a:	a8 9a       	sbi	0x15, 0	; 21

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     68c:	0e c0       	rjmp	.+28     	; 0x6aa <main+0xc8>
     68e:	e0 91 c6 01 	lds	r30, 0x01C6
     692:	f0 91 c7 01 	lds	r31, 0x01C7
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	60 81       	ld	r22, Z
     69c:	44 d5       	rcall	.+2696   	; 0x1126 <CDC_Device_SendByte>
     69e:	21 97       	sbiw	r28, 0x01	; 1
     6a0:	88 23       	and	r24, r24
     6a2:	29 f4       	brne	.+10     	; 0x6ae <main+0xcc>
     6a4:	84 ec       	ldi	r24, 0xC4	; 196
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	b5 dd       	rcall	.-1174   	; 0x214 <RingBuffer_Remove>
     6aa:	20 97       	sbiw	r28, 0x00	; 0
     6ac:	81 f7       	brne	.-32     	; 0x68e <main+0xac>
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	8c d5       	rcall	.+2840   	; 0x11cc <CDC_Device_USBTask>
     6b4:	4d d4       	rcall	.+2202   	; 0xf50 <USB_USBTask>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     6b6:	c5 cf       	rjmp	.-118    	; 0x642 <main+0x60>

000006b8 <EVENT_USB_Device_Connect>:
     6b8:	08 95       	ret

000006ba <EVENT_USB_Device_Disconnect>:
     6ba:	08 95       	ret

000006bc <EVENT_USB_Device_ConfigurationChanged>:
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e c5       	rjmp	.+2588   	; 0x10de <CDC_Device_ConfigureEndpoints>

000006c2 <EVENT_USB_Device_ControlRequest>:
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	5f c4       	rjmp	.+2238   	; 0xf86 <CDC_Device_ProcessControlRequest>

000006c8 <EVENT_CDC_Device_LineEncodingChanged>:
     6c8:	08 95       	ret

000006ca <CALLBACK_USB_GetDescriptor>:
     6ca:	92 30       	cpi	r25, 0x02	; 2
     6cc:	29 f0       	breq	.+10     	; 0x6d8 <CALLBACK_USB_GetDescriptor+0xe>
     6ce:	93 30       	cpi	r25, 0x03	; 3
     6d0:	41 f0       	breq	.+16     	; 0x6e2 <CALLBACK_USB_GetDescriptor+0x18>
     6d2:	91 30       	cpi	r25, 0x01	; 1
     6d4:	e9 f4       	brne	.+58     	; 0x710 <CALLBACK_USB_GetDescriptor+0x46>
     6d6:	17 c0       	rjmp	.+46     	; 0x706 <CALLBACK_USB_GetDescriptor+0x3c>
     6d8:	8e e3       	ldi	r24, 0x3E	; 62
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	e3 e5       	ldi	r30, 0x53	; 83
     6de:	f1 e0       	ldi	r31, 0x01	; 1
     6e0:	1b c0       	rjmp	.+54     	; 0x718 <CALLBACK_USB_GetDescriptor+0x4e>
     6e2:	81 30       	cpi	r24, 0x01	; 1
     6e4:	41 f0       	breq	.+16     	; 0x6f6 <CALLBACK_USB_GetDescriptor+0x2c>
     6e6:	81 30       	cpi	r24, 0x01	; 1
     6e8:	18 f0       	brcs	.+6      	; 0x6f0 <CALLBACK_USB_GetDescriptor+0x26>
     6ea:	82 30       	cpi	r24, 0x02	; 2
     6ec:	89 f4       	brne	.+34     	; 0x710 <CALLBACK_USB_GetDescriptor+0x46>
					  ParserData->TotalReportItems++;
     6ee:	06 c0       	rjmp	.+12     	; 0x6fc <CALLBACK_USB_GetDescriptor+0x32>
     6f0:	ef e4       	ldi	r30, 0x4F	; 79
     6f2:	f1 e0       	ldi	r31, 0x01	; 1
     6f4:	05 c0       	rjmp	.+10     	; 0x700 <CALLBACK_USB_GetDescriptor+0x36>
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6f6:	e5 e3       	ldi	r30, 0x35	; 53
     6f8:	f1 e0       	ldi	r31, 0x01	; 1
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <CALLBACK_USB_GetDescriptor+0x36>
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
     6fc:	e5 e0       	ldi	r30, 0x05	; 5
     6fe:	f1 e0       	ldi	r31, 0x01	; 1
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     700:	84 91       	lpm	r24, Z
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	09 c0       	rjmp	.+18     	; 0x718 <CALLBACK_USB_GetDescriptor+0x4e>
     706:	82 e1       	ldi	r24, 0x12	; 18
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	e1 e9       	ldi	r30, 0x91	; 145
     70c:	f1 e0       	ldi	r31, 0x01	; 1
     70e:	04 c0       	rjmp	.+8      	; 0x718 <CALLBACK_USB_GetDescriptor+0x4e>
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	e0 e0       	ldi	r30, 0x00	; 0
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	da 01       	movw	r26, r20
     71a:	11 96       	adiw	r26, 0x01	; 1
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     71c:	fc 93       	st	X, r31
     71e:	ee 93       	st	-X, r30
     720:	08 95       	ret

00000722 <Endpoint_ConfigureEndpoint_Prv>:
     722:	98 2f       	mov	r25, r24
     724:	2a c0       	rjmp	.+84     	; 0x77a <Endpoint_ConfigureEndpoint_Prv+0x58>
     726:	90 93 e9 00 	sts	0x00E9, r25
     72a:	98 17       	cp	r25, r24
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     72c:	39 f0       	breq	.+14     	; 0x73c <Endpoint_ConfigureEndpoint_Prv+0x1a>
     72e:	70 91 ec 00 	lds	r23, 0x00EC
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     732:	20 91 ed 00 	lds	r18, 0x00ED
     736:	50 91 f0 00 	lds	r21, 0x00F0
     73a:	03 c0       	rjmp	.+6      	; 0x742 <Endpoint_ConfigureEndpoint_Prv+0x20>
     73c:	24 2f       	mov	r18, r20
     73e:	76 2f       	mov	r23, r22
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	21 ff       	sbrs	r18, 1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     744:	19 c0       	rjmp	.+50     	; 0x778 <Endpoint_ConfigureEndpoint_Prv+0x56>
     746:	30 91 eb 00 	lds	r19, 0x00EB
     74a:	3e 7f       	andi	r19, 0xFE	; 254
     74c:	30 93 eb 00 	sts	0x00EB, r19
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     750:	30 91 ed 00 	lds	r19, 0x00ED
     754:	3d 7f       	andi	r19, 0xFD	; 253
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     756:	30 93 ed 00 	sts	0x00ED, r19
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     75a:	30 91 eb 00 	lds	r19, 0x00EB
     75e:	31 60       	ori	r19, 0x01	; 1
     760:	30 93 eb 00 	sts	0x00EB, r19
     764:	70 93 ec 00 	sts	0x00EC, r23
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     768:	20 93 ed 00 	sts	0x00ED, r18
     76c:	50 93 f0 00 	sts	0x00F0, r21
	  return HID_PARSE_NoUnfilteredReportItems;
     770:	20 91 ee 00 	lds	r18, 0x00EE

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     774:	27 ff       	sbrs	r18, 7
     776:	08 c0       	rjmp	.+16     	; 0x788 <Endpoint_ConfigureEndpoint_Prv+0x66>

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     778:	9f 5f       	subi	r25, 0xFF	; 255
     77a:	95 30       	cpi	r25, 0x05	; 5

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     77c:	a0 f2       	brcs	.-88     	; 0x726 <Endpoint_ConfigureEndpoint_Prv+0x4>
     77e:	8f 70       	andi	r24, 0x0F	; 15
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     780:	80 93 e9 00 	sts	0x00E9, r24
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	08 95       	ret
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	08 95       	ret

0000078c <Endpoint_ConfigureEndpointTable>:
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     790:	cf 93       	push	r28

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     792:	df 93       	push	r29
     794:	16 2f       	mov	r17, r22
     796:	ec 01       	movw	r28, r24
     798:	00 e0       	ldi	r16, 0x00	; 0
     79a:	2a c0       	rjmp	.+84     	; 0x7f0 <Endpoint_ConfigureEndpointTable+0x64>
     79c:	98 81       	ld	r25, Y
     79e:	99 23       	and	r25, r25
     7a0:	29 f1       	breq	.+74     	; 0x7ec <Endpoint_ConfigureEndpointTable+0x60>
     7a2:	6b 81       	ldd	r22, Y+3	; 0x03
     7a4:	e9 81       	ldd	r30, Y+1	; 0x01
     7a6:	fa 81       	ldd	r31, Y+2	; 0x02
     7a8:	2c 81       	ldd	r18, Y+4	; 0x04
     7aa:	89 2f       	mov	r24, r25
     7ac:	8f 70       	andi	r24, 0x0F	; 15
     7ae:	85 30       	cpi	r24, 0x05	; 5
     7b0:	18 f5       	brcc	.+70     	; 0x7f8 <Endpoint_ConfigureEndpointTable+0x6c>
     7b2:	62 95       	swap	r22
     7b4:	66 0f       	add	r22, r22
     7b6:	66 0f       	add	r22, r22
     7b8:	60 7c       	andi	r22, 0xC0	; 192
     7ba:	99 1f       	adc	r25, r25
     7bc:	99 27       	eor	r25, r25
     7be:	99 1f       	adc	r25, r25
     7c0:	69 2b       	or	r22, r25
     7c2:	22 30       	cpi	r18, 0x02	; 2
     7c4:	10 f0       	brcs	.+4      	; 0x7ca <Endpoint_ConfigureEndpointTable+0x3e>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     7c6:	96 e0       	ldi	r25, 0x06	; 6
     7c8:	01 c0       	rjmp	.+2      	; 0x7cc <Endpoint_ConfigureEndpointTable+0x40>
     7ca:	92 e0       	ldi	r25, 0x02	; 2
     7cc:	28 e0       	ldi	r18, 0x08	; 8
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     7ce:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	03 c0       	rjmp	.+6      	; 0x7da <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     7d4:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     7d6:	22 0f       	add	r18, r18
     7d8:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     7da:	2e 17       	cp	r18, r30
     7dc:	3f 07       	cpc	r19, r31
     7de:	d0 f3       	brcs	.-12     	; 0x7d4 <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     7e0:	42 95       	swap	r20
     7e2:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     7e4:	49 2b       	or	r20, r25
     7e6:	9d df       	rcall	.-198    	; 0x722 <Endpoint_ConfigureEndpoint_Prv>
     7e8:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     7ea:	31 f0       	breq	.+12     	; 0x7f8 <Endpoint_ConfigureEndpointTable+0x6c>
     7ec:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     7ee:	25 96       	adiw	r28, 0x05	; 5
     7f0:	01 17       	cp	r16, r17
     7f2:	a1 f6       	brne	.-88     	; 0x79c <Endpoint_ConfigureEndpointTable+0x10>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     7f6:	01 c0       	rjmp	.+2      	; 0x7fa <Endpoint_ConfigureEndpointTable+0x6e>
     7f8:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     7fa:	df 91       	pop	r29
	}
	
	return true;
}
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	08 95       	ret

00000804 <Endpoint_ClearStatusStage>:
     804:	80 91 58 02 	lds	r24, 0x0258
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     808:	87 ff       	sbrs	r24, 7
     80a:	11 c0       	rjmp	.+34     	; 0x82e <Endpoint_ClearStatusStage+0x2a>
     80c:	03 c0       	rjmp	.+6      	; 0x814 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     80e:	8e b3       	in	r24, 0x1e	; 30
     810:	88 23       	and	r24, r24
     812:	b1 f0       	breq	.+44     	; 0x840 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     814:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     818:	82 ff       	sbrs	r24, 2
     81a:	f9 cf       	rjmp	.-14     	; 0x80e <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     81c:	80 91 e8 00 	lds	r24, 0x00E8
     820:	8b 77       	andi	r24, 0x7B	; 123
     822:	80 93 e8 00 	sts	0x00E8, r24
     826:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     828:	8e b3       	in	r24, 0x1e	; 30
     82a:	88 23       	and	r24, r24
     82c:	49 f0       	breq	.+18     	; 0x840 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     82e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     832:	80 ff       	sbrs	r24, 0
     834:	f9 cf       	rjmp	.-14     	; 0x828 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     836:	80 91 e8 00 	lds	r24, 0x00E8
     83a:	8e 77       	andi	r24, 0x7E	; 126
     83c:	80 93 e8 00 	sts	0x00E8, r24
     840:	08 95       	ret

00000842 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     842:	80 91 e4 00 	lds	r24, 0x00E4
     846:	90 91 e5 00 	lds	r25, 0x00E5
     84a:	45 e6       	ldi	r20, 0x65	; 101
     84c:	01 c0       	rjmp	.+2      	; 0x850 <Endpoint_WaitUntilReady+0xe>
     84e:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     850:	20 91 ec 00 	lds	r18, 0x00EC
     854:	20 ff       	sbrs	r18, 0
     856:	22 c0       	rjmp	.+68     	; 0x89c <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     858:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     85c:	20 fd       	sbrc	r18, 0
     85e:	14 c0       	rjmp	.+40     	; 0x888 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     860:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     862:	22 23       	and	r18, r18
     864:	99 f0       	breq	.+38     	; 0x88c <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     866:	25 30       	cpi	r18, 0x05	; 5
     868:	99 f0       	breq	.+38     	; 0x890 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     86a:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     86e:	25 fd       	sbrc	r18, 5
     870:	11 c0       	rjmp	.+34     	; 0x894 <Endpoint_WaitUntilReady+0x52>
     872:	20 91 e4 00 	lds	r18, 0x00E4
     876:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     87a:	28 17       	cp	r18, r24
     87c:	39 07       	cpc	r19, r25
     87e:	41 f3       	breq	.-48     	; 0x850 <Endpoint_WaitUntilReady+0xe>
     880:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     882:	29 f7       	brne	.-54     	; 0x84e <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
     884:	84 e0       	ldi	r24, 0x04	; 4
     886:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     88c:	82 e0       	ldi	r24, 0x02	; 2
     88e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     890:	83 e0       	ldi	r24, 0x03	; 3
     892:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     898:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     89a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     89c:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     8a0:	22 ff       	sbrs	r18, 2
     8a2:	de cf       	rjmp	.-68     	; 0x860 <Endpoint_WaitUntilReady+0x1e>
     8a4:	f9 cf       	rjmp	.-14     	; 0x898 <Endpoint_WaitUntilReady+0x56>

000008a6 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     8a6:	40 d0       	rcall	.+128    	; 0x928 <USB_INT_DisableAllInterrupts>
     8a8:	42 d0       	rcall	.+132    	; 0x92e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     8aa:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     8ae:	8f 77       	andi	r24, 0x7F	; 127
     8b0:	80 93 d8 00 	sts	0x00D8, r24
     8b4:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     8b8:	80 68       	ori	r24, 0x80	; 128
     8ba:	80 93 d8 00 	sts	0x00D8, r24
     8be:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     8c2:	8f 7d       	andi	r24, 0xDF	; 223
     8c4:	80 93 d8 00 	sts	0x00D8, r24
     8c8:	84 e0       	ldi	r24, 0x04	; 4
     8ca:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8cc:	86 e0       	ldi	r24, 0x06	; 6
     8ce:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8d0:	09 b4       	in	r0, 0x29	; 41
     8d2:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     8d4:	fd cf       	rjmp	.-6      	; 0x8d0 <USB_ResetInterface+0x2a>
     8d6:	1e ba       	out	0x1e, r1	; 30
     8d8:	10 92 54 02 	sts	0x0254, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
     8dc:	10 92 56 02 	sts	0x0256, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     8e0:	10 92 55 02 	sts	0x0255, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     8e8:	42 e0       	ldi	r20, 0x02	; 2
     8ea:	1b df       	rcall	.-458    	; 0x722 <Endpoint_ConfigureEndpoint_Prv>
     8ec:	80 91 e1 00 	lds	r24, 0x00E1
     8f0:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     8f2:	80 93 e1 00 	sts	0x00E1, r24
     8f6:	80 91 e2 00 	lds	r24, 0x00E2
     8fa:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     8fc:	80 93 e2 00 	sts	0x00E2, r24
     900:	80 91 e2 00 	lds	r24, 0x00E2
     904:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     906:	80 93 e2 00 	sts	0x00E2, r24
     90a:	80 91 e0 00 	lds	r24, 0x00E0
     90e:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     910:	80 93 e0 00 	sts	0x00E0, r24
     914:	08 95       	ret

00000916 <USB_Init>:
     916:	e3 e6       	ldi	r30, 0x63	; 99
     918:	f0 e0       	ldi	r31, 0x00	; 0
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     91a:	80 81       	ld	r24, Z
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     91c:	8e 7f       	andi	r24, 0xFE	; 254
     91e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	80 93 57 02 	sts	0x0257, r24

	USB_ResetInterface();
     926:	bf cf       	rjmp	.-130    	; 0x8a6 <USB_ResetInterface>

00000928 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     928:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     92c:	08 95       	ret

0000092e <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     92e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     932:	08 95       	ret

00000934 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     934:	1f 92       	push	r1
     936:	0f 92       	push	r0
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	0f 92       	push	r0
     93c:	11 24       	eor	r1, r1
     93e:	2f 93       	push	r18
     940:	3f 93       	push	r19
     942:	4f 93       	push	r20
     944:	5f 93       	push	r21
     946:	6f 93       	push	r22
     948:	7f 93       	push	r23
     94a:	8f 93       	push	r24
     94c:	9f 93       	push	r25
     94e:	af 93       	push	r26
     950:	bf 93       	push	r27
     952:	ef 93       	push	r30
     954:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     956:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     95a:	82 ff       	sbrs	r24, 2
     95c:	0a c0       	rjmp	.+20     	; 0x972 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     95e:	80 91 e2 00 	lds	r24, 0x00E2
     962:	82 ff       	sbrs	r24, 2
     964:	06 c0       	rjmp	.+12     	; 0x972 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     966:	80 91 e1 00 	lds	r24, 0x00E1
     96a:	8b 7f       	andi	r24, 0xFB	; 251
     96c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     970:	ee d2       	rcall	.+1500   	; 0xf4e <USB_Event_Stub>
     972:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     976:	80 ff       	sbrs	r24, 0
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     978:	16 c0       	rjmp	.+44     	; 0x9a6 <__vector_11+0x72>
     97a:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     97e:	80 ff       	sbrs	r24, 0
     980:	12 c0       	rjmp	.+36     	; 0x9a6 <__vector_11+0x72>
     982:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     986:	8e 7f       	andi	r24, 0xFE	; 254
     988:	80 93 e2 00 	sts	0x00E2, r24
     98c:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     990:	80 61       	ori	r24, 0x10	; 16
     992:	80 93 e2 00 	sts	0x00E2, r24
     996:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     99a:	80 62       	ori	r24, 0x20	; 32
     99c:	80 93 d8 00 	sts	0x00D8, r24
     9a0:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     9a2:	1e ba       	out	0x1e, r1	; 30

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     9a4:	8a de       	rcall	.-748    	; 0x6ba <EVENT_USB_Device_Disconnect>
		EVENT_USB_Device_Disconnect();
     9a6:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     9aa:	84 ff       	sbrs	r24, 4
     9ac:	2c c0       	rjmp	.+88     	; 0xa06 <__vector_11+0xd2>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     9ae:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     9b2:	84 ff       	sbrs	r24, 4
     9b4:	28 c0       	rjmp	.+80     	; 0xa06 <__vector_11+0xd2>
     9b6:	84 e0       	ldi	r24, 0x04	; 4
     9b8:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     9ba:	86 e0       	ldi	r24, 0x06	; 6
     9bc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     9be:	09 b4       	in	r0, 0x29	; 41
     9c0:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     9c2:	fd cf       	rjmp	.-6      	; 0x9be <__vector_11+0x8a>
     9c4:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     9c8:	8f 7d       	andi	r24, 0xDF	; 223
     9ca:	80 93 d8 00 	sts	0x00D8, r24
     9ce:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     9d2:	8f 7e       	andi	r24, 0xEF	; 239
     9d4:	80 93 e1 00 	sts	0x00E1, r24
     9d8:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     9dc:	8f 7e       	andi	r24, 0xEF	; 239
     9de:	80 93 e2 00 	sts	0x00E2, r24
     9e2:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     9e6:	81 60       	ori	r24, 0x01	; 1
     9e8:	80 93 e2 00 	sts	0x00E2, r24
     9ec:	80 91 54 02 	lds	r24, 0x0254
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     9f0:	88 23       	and	r24, r24
     9f2:	21 f4       	brne	.+8      	; 0x9fc <__vector_11+0xc8>
     9f4:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     9f8:	87 ff       	sbrs	r24, 7
     9fa:	02 c0       	rjmp	.+4      	; 0xa00 <__vector_11+0xcc>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     9fc:	84 e0       	ldi	r24, 0x04	; 4
     9fe:	01 c0       	rjmp	.+2      	; 0xa02 <__vector_11+0xce>
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	8e bb       	out	0x1e, r24	; 30
     a04:	59 de       	rcall	.-846    	; 0x6b8 <EVENT_USB_Device_Connect>
     a06:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     a0a:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     a0c:	26 c0       	rjmp	.+76     	; 0xa5a <__vector_11+0x126>
     a0e:	80 91 e2 00 	lds	r24, 0x00E2
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     a12:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     a14:	22 c0       	rjmp	.+68     	; 0xa5a <__vector_11+0x126>
     a16:	80 91 e1 00 	lds	r24, 0x00E1
     a1a:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     a1c:	80 93 e1 00 	sts	0x00E1, r24
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	8e bb       	out	0x1e, r24	; 30
     a24:	10 92 54 02 	sts	0x0254, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     a28:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
     a2c:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a2e:	80 93 e1 00 	sts	0x00E1, r24
     a32:	80 91 e2 00 	lds	r24, 0x00E2
     a36:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a38:	80 93 e2 00 	sts	0x00E2, r24
     a3c:	80 91 e2 00 	lds	r24, 0x00E2
     a40:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     a42:	80 93 e2 00 	sts	0x00E2, r24
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     a4c:	6a de       	rcall	.-812    	; 0x722 <Endpoint_ConfigureEndpoint_Prv>
     a4e:	80 91 f0 00 	lds	r24, 0x00F0
     a52:	88 60       	ori	r24, 0x08	; 8
     a54:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a58:	7a d2       	rcall	.+1268   	; 0xf4e <USB_Event_Stub>
     a5a:	ff 91       	pop	r31
     a5c:	ef 91       	pop	r30
     a5e:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     a60:	af 91       	pop	r26
     a62:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     a64:	8f 91       	pop	r24
     a66:	7f 91       	pop	r23
     a68:	6f 91       	pop	r22
     a6a:	5f 91       	pop	r21
     a6c:	4f 91       	pop	r20
     a6e:	3f 91       	pop	r19
     a70:	2f 91       	pop	r18
     a72:	0f 90       	pop	r0
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	0f 90       	pop	r0
     a78:	1f 90       	pop	r1
     a7a:	18 95       	reti

00000a7c <__vector_12>:
     a7c:	1f 92       	push	r1
     a7e:	0f 92       	push	r0
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	0f 92       	push	r0
     a84:	11 24       	eor	r1, r1

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     a86:	2f 93       	push	r18
     a88:	3f 93       	push	r19
     a8a:	4f 93       	push	r20
     a8c:	5f 93       	push	r21
     a8e:	6f 93       	push	r22
     a90:	7f 93       	push	r23
     a92:	8f 93       	push	r24
     a94:	9f 93       	push	r25
     a96:	af 93       	push	r26
     a98:	bf 93       	push	r27
     a9a:	cf 93       	push	r28
     a9c:	ef 93       	push	r30
     a9e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     aa0:	c0 91 e9 00 	lds	r28, 0x00E9
     aa4:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     aa6:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aaa:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     aae:	80 91 f0 00 	lds	r24, 0x00F0
     ab2:	87 7f       	andi	r24, 0xF7	; 247
     ab4:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     ab8:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     aba:	e2 d0       	rcall	.+452    	; 0xc80 <USB_Device_ProcessControlRequest>
     abc:	10 92 e9 00 	sts	0x00E9, r1
     ac0:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     ac4:	88 60       	ori	r24, 0x08	; 8
     ac6:	80 93 f0 00 	sts	0x00F0, r24
     aca:	c0 93 e9 00 	sts	0x00E9, r28
     ace:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     ad0:	ef 91       	pop	r30
     ad2:	cf 91       	pop	r28
     ad4:	bf 91       	pop	r27
     ad6:	af 91       	pop	r26
     ad8:	9f 91       	pop	r25
     ada:	8f 91       	pop	r24
     adc:	7f 91       	pop	r23
     ade:	6f 91       	pop	r22
     ae0:	5f 91       	pop	r21
     ae2:	4f 91       	pop	r20
     ae4:	3f 91       	pop	r19
     ae6:	2f 91       	pop	r18
     ae8:	0f 90       	pop	r0
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	0f 90       	pop	r0
     aee:	1f 90       	pop	r1
     af0:	18 95       	reti

00000af2 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     af2:	20 91 5e 02 	lds	r18, 0x025E
     af6:	30 91 5f 02 	lds	r19, 0x025F
     afa:	26 17       	cp	r18, r22
     afc:	37 07       	cpc	r19, r23
     afe:	28 f4       	brcc	.+10     	; 0xb0a <Endpoint_Write_Control_Stream_LE+0x18>
     b00:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b02:	58 2f       	mov	r21, r24
     b04:	49 2f       	mov	r20, r25
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	3e c0       	rjmp	.+124    	; 0xb86 <Endpoint_Write_Control_Stream_LE+0x94>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     b0a:	61 15       	cp	r22, r1
     b0c:	71 05       	cpc	r23, r1
     b0e:	c9 f7       	brne	.-14     	; 0xb02 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b10:	20 91 e8 00 	lds	r18, 0x00E8
     b14:	2e 77       	andi	r18, 0x7E	; 126
     b16:	20 93 e8 00 	sts	0x00E8, r18
     b1a:	f3 cf       	rjmp	.-26     	; 0xb02 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b1c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b1e:	88 23       	and	r24, r24
     b20:	09 f4       	brne	.+2      	; 0xb24 <Endpoint_Write_Control_Stream_LE+0x32>
     b22:	46 c0       	rjmp	.+140    	; 0xbb0 <Endpoint_Write_Control_Stream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b24:	85 30       	cpi	r24, 0x05	; 5
     b26:	09 f4       	brne	.+2      	; 0xb2a <Endpoint_Write_Control_Stream_LE+0x38>
     b28:	3f c0       	rjmp	.+126    	; 0xba8 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b2a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     b2e:	83 fd       	sbrc	r24, 3
     b30:	3d c0       	rjmp	.+122    	; 0xbac <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b32:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     b36:	82 fd       	sbrc	r24, 2
     b38:	31 c0       	rjmp	.+98     	; 0xb9c <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b3a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     b3e:	80 ff       	sbrs	r24, 0
     b40:	22 c0       	rjmp	.+68     	; 0xb86 <Endpoint_Write_Control_Stream_LE+0x94>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     b42:	20 91 f2 00 	lds	r18, 0x00F2
     b46:	30 e0       	ldi	r19, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b48:	e5 2f       	mov	r30, r21
     b4a:	f4 2f       	mov	r31, r20
*/

#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     b4c:	2e 1b       	sub	r18, r30
     b4e:	3f 0b       	sbc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b50:	05 c0       	rjmp	.+10     	; 0xb5c <Endpoint_Write_Control_Stream_LE+0x6a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     b52:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b54:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     b58:	61 50       	subi	r22, 0x01	; 1
     b5a:	70 40       	sbci	r23, 0x00	; 0
*/

#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     b5c:	cf 01       	movw	r24, r30
     b5e:	82 0f       	add	r24, r18
     b60:	93 1f       	adc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b62:	61 15       	cp	r22, r1
     b64:	71 05       	cpc	r23, r1
     b66:	19 f0       	breq	.+6      	; 0xb6e <Endpoint_Write_Control_Stream_LE+0x7c>
     b68:	88 30       	cpi	r24, 0x08	; 8
     b6a:	91 05       	cpc	r25, r1
     b6c:	90 f3       	brcs	.-28     	; 0xb52 <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     b6e:	21 e0       	ldi	r18, 0x01	; 1
     b70:	88 30       	cpi	r24, 0x08	; 8
     b72:	91 05       	cpc	r25, r1
     b74:	09 f0       	breq	.+2      	; 0xb78 <Endpoint_Write_Control_Stream_LE+0x86>
     b76:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b78:	80 91 e8 00 	lds	r24, 0x00E8
     b7c:	8e 77       	andi	r24, 0x7E	; 126
     b7e:	80 93 e8 00 	sts	0x00E8, r24
     b82:	5e 2f       	mov	r21, r30
     b84:	4f 2f       	mov	r20, r31
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     b86:	61 15       	cp	r22, r1
     b88:	71 05       	cpc	r23, r1
     b8a:	41 f6       	brne	.-112    	; 0xb1c <Endpoint_Write_Control_Stream_LE+0x2a>
     b8c:	22 23       	and	r18, r18
     b8e:	31 f6       	brne	.-116    	; 0xb1c <Endpoint_Write_Control_Stream_LE+0x2a>
     b90:	05 c0       	rjmp	.+10     	; 0xb9c <Endpoint_Write_Control_Stream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b92:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b94:	88 23       	and	r24, r24
     b96:	61 f0       	breq	.+24     	; 0xbb0 <Endpoint_Write_Control_Stream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b98:	85 30       	cpi	r24, 0x05	; 5
     b9a:	61 f0       	breq	.+24     	; 0xbb4 <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b9c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     ba0:	82 ff       	sbrs	r24, 2
     ba2:	f7 cf       	rjmp	.-18     	; 0xb92 <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     bb4:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     bb6:	08 95       	ret

00000bb8 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     bb8:	20 91 5e 02 	lds	r18, 0x025E
     bbc:	30 91 5f 02 	lds	r19, 0x025F
     bc0:	26 17       	cp	r18, r22
     bc2:	37 07       	cpc	r19, r23
     bc4:	28 f4       	brcc	.+10     	; 0xbd0 <Endpoint_Write_Control_PStream_LE+0x18>
     bc6:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     bc8:	58 2f       	mov	r21, r24
     bca:	49 2f       	mov	r20, r25
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	3f c0       	rjmp	.+126    	; 0xc4e <Endpoint_Write_Control_PStream_LE+0x96>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     bd0:	61 15       	cp	r22, r1
     bd2:	71 05       	cpc	r23, r1
     bd4:	c9 f7       	brne	.-14     	; 0xbc8 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bd6:	20 91 e8 00 	lds	r18, 0x00E8
     bda:	2e 77       	andi	r18, 0x7E	; 126
     bdc:	20 93 e8 00 	sts	0x00E8, r18
     be0:	f3 cf       	rjmp	.-26     	; 0xbc8 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     be2:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     be4:	88 23       	and	r24, r24
     be6:	09 f4       	brne	.+2      	; 0xbea <Endpoint_Write_Control_PStream_LE+0x32>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <Endpoint_Write_Control_PStream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     bea:	85 30       	cpi	r24, 0x05	; 5
     bec:	09 f4       	brne	.+2      	; 0xbf0 <Endpoint_Write_Control_PStream_LE+0x38>
     bee:	40 c0       	rjmp	.+128    	; 0xc70 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bf0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     bf4:	83 fd       	sbrc	r24, 3
     bf6:	3e c0       	rjmp	.+124    	; 0xc74 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     bf8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     bfc:	82 fd       	sbrc	r24, 2
     bfe:	32 c0       	rjmp	.+100    	; 0xc64 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c00:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     c04:	80 ff       	sbrs	r24, 0
     c06:	23 c0       	rjmp	.+70     	; 0xc4e <Endpoint_Write_Control_PStream_LE+0x96>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     c08:	20 91 f2 00 	lds	r18, 0x00F2
     c0c:	30 e0       	ldi	r19, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     c0e:	e5 2f       	mov	r30, r21
     c10:	f4 2f       	mov	r31, r20
*/

#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     c12:	2e 1b       	sub	r18, r30
     c14:	3f 0b       	sbc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     c16:	06 c0       	rjmp	.+12     	; 0xc24 <Endpoint_Write_Control_PStream_LE+0x6c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     c18:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c1a:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     c1e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     c20:	61 50       	subi	r22, 0x01	; 1
     c22:	70 40       	sbci	r23, 0x00	; 0
*/

#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     c24:	c9 01       	movw	r24, r18
     c26:	8e 0f       	add	r24, r30
     c28:	9f 1f       	adc	r25, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     c2a:	61 15       	cp	r22, r1
     c2c:	71 05       	cpc	r23, r1
     c2e:	19 f0       	breq	.+6      	; 0xc36 <Endpoint_Write_Control_PStream_LE+0x7e>
     c30:	88 30       	cpi	r24, 0x08	; 8
     c32:	91 05       	cpc	r25, r1
     c34:	88 f3       	brcs	.-30     	; 0xc18 <Endpoint_Write_Control_PStream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     c36:	21 e0       	ldi	r18, 0x01	; 1
     c38:	88 30       	cpi	r24, 0x08	; 8
     c3a:	91 05       	cpc	r25, r1
     c3c:	09 f0       	breq	.+2      	; 0xc40 <Endpoint_Write_Control_PStream_LE+0x88>
     c3e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c40:	80 91 e8 00 	lds	r24, 0x00E8
     c44:	8e 77       	andi	r24, 0x7E	; 126
     c46:	80 93 e8 00 	sts	0x00E8, r24
     c4a:	5e 2f       	mov	r21, r30
     c4c:	4f 2f       	mov	r20, r31
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     c4e:	61 15       	cp	r22, r1
     c50:	71 05       	cpc	r23, r1
     c52:	39 f6       	brne	.-114    	; 0xbe2 <Endpoint_Write_Control_PStream_LE+0x2a>
     c54:	22 23       	and	r18, r18
     c56:	29 f6       	brne	.-118    	; 0xbe2 <Endpoint_Write_Control_PStream_LE+0x2a>
     c58:	05 c0       	rjmp	.+10     	; 0xc64 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c5a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c5c:	88 23       	and	r24, r24
     c5e:	61 f0       	breq	.+24     	; 0xc78 <Endpoint_Write_Control_PStream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c60:	85 30       	cpi	r24, 0x05	; 5
     c62:	61 f0       	breq	.+24     	; 0xc7c <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c64:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     c68:	82 ff       	sbrs	r24, 2
     c6a:	f7 cf       	rjmp	.-18     	; 0xc5a <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     c7c:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     c7e:	08 95       	ret

00000c80 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	ac 97       	sbiw	r28, 0x2c	; 44
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     c98:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     c9a:	e8 e5       	ldi	r30, 0x58	; 88
     c9c:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     c9e:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     ca2:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     ca4:	8f 5f       	subi	r24, 0xFF	; 255
     ca6:	88 30       	cpi	r24, 0x08	; 8
     ca8:	d1 f7       	brne	.-12     	; 0xc9e <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     caa:	0b dd       	rcall	.-1514   	; 0x6c2 <EVENT_USB_Device_ControlRequest>
     cac:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cb0:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     cb2:	34 c1       	rjmp	.+616    	; 0xf1c <USB_Device_ProcessControlRequest+0x29c>
     cb4:	80 91 58 02 	lds	r24, 0x0258
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     cb8:	20 91 59 02 	lds	r18, 0x0259

		switch (USB_ControlRequest.bRequest)
     cbc:	25 30       	cpi	r18, 0x05	; 5
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <USB_Device_ProcessControlRequest+0x42>
     cc0:	84 c0       	rjmp	.+264    	; 0xdca <USB_Device_ProcessControlRequest+0x14a>
     cc2:	26 30       	cpi	r18, 0x06	; 6
     cc4:	40 f4       	brcc	.+16     	; 0xcd6 <USB_Device_ProcessControlRequest+0x56>
     cc6:	21 30       	cpi	r18, 0x01	; 1
     cc8:	a1 f1       	breq	.+104    	; 0xd32 <USB_Device_ProcessControlRequest+0xb2>
     cca:	21 30       	cpi	r18, 0x01	; 1
     ccc:	70 f0       	brcs	.+28     	; 0xcea <USB_Device_ProcessControlRequest+0x6a>
     cce:	23 30       	cpi	r18, 0x03	; 3
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <USB_Device_ProcessControlRequest+0x54>
     cd2:	24 c1       	rjmp	.+584    	; 0xf1c <USB_Device_ProcessControlRequest+0x29c>
     cd4:	2e c0       	rjmp	.+92     	; 0xd32 <USB_Device_ProcessControlRequest+0xb2>
     cd6:	28 30       	cpi	r18, 0x08	; 8
     cd8:	09 f4       	brne	.+2      	; 0xcdc <USB_Device_ProcessControlRequest+0x5c>
     cda:	f3 c0       	rjmp	.+486    	; 0xec2 <USB_Device_ProcessControlRequest+0x242>
     cdc:	29 30       	cpi	r18, 0x09	; 9
     cde:	09 f4       	brne	.+2      	; 0xce2 <USB_Device_ProcessControlRequest+0x62>
     ce0:	02 c1       	rjmp	.+516    	; 0xee6 <USB_Device_ProcessControlRequest+0x266>
     ce2:	26 30       	cpi	r18, 0x06	; 6
     ce4:	09 f0       	breq	.+2      	; 0xce8 <USB_Device_ProcessControlRequest+0x68>
     ce6:	1a c1       	rjmp	.+564    	; 0xf1c <USB_Device_ProcessControlRequest+0x29c>
     ce8:	93 c0       	rjmp	.+294    	; 0xe10 <USB_Device_ProcessControlRequest+0x190>
     cea:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     cec:	21 f0       	breq	.+8      	; 0xcf6 <USB_Device_ProcessControlRequest+0x76>
     cee:	82 38       	cpi	r24, 0x82	; 130
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <USB_Device_ProcessControlRequest+0x74>
     cf2:	14 c1       	rjmp	.+552    	; 0xf1c <USB_Device_ProcessControlRequest+0x29c>
     cf4:	08 c0       	rjmp	.+16     	; 0xd06 <USB_Device_ProcessControlRequest+0x86>
     cf6:	80 91 55 02 	lds	r24, 0x0255
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     cfa:	90 91 56 02 	lds	r25, 0x0256
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     cfe:	99 23       	and	r25, r25
     d00:	71 f0       	breq	.+28     	; 0xd1e <USB_Device_ProcessControlRequest+0x9e>
     d02:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     d04:	0c c0       	rjmp	.+24     	; 0xd1e <USB_Device_ProcessControlRequest+0x9e>
     d06:	80 91 5c 02 	lds	r24, 0x025C
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     d0a:	8f 70       	andi	r24, 0x0F	; 15
     d0c:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d10:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     d14:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
     d16:	95 ff       	sbrs	r25, 5
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d1e:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d22:	97 7f       	andi	r25, 0xF7	; 247
     d24:	90 93 e8 00 	sts	0x00E8, r25
     d28:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     d2c:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     d30:	d3 c0       	rjmp	.+422    	; 0xed8 <USB_Device_ProcessControlRequest+0x258>
     d32:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d34:	19 f0       	breq	.+6      	; 0xd3c <USB_Device_ProcessControlRequest+0xbc>
     d36:	82 30       	cpi	r24, 0x02	; 2
     d38:	09 f0       	breq	.+2      	; 0xd3c <USB_Device_ProcessControlRequest+0xbc>
     d3a:	f0 c0       	rjmp	.+480    	; 0xf1c <USB_Device_ProcessControlRequest+0x29c>
     d3c:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     d3e:	8f 71       	andi	r24, 0x1F	; 31
     d40:	90 70       	andi	r25, 0x00	; 0
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	29 f0       	breq	.+10     	; 0xd50 <USB_Device_ProcessControlRequest+0xd0>
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	91 05       	cpc	r25, r1
     d4a:	09 f0       	breq	.+2      	; 0xd4e <USB_Device_ProcessControlRequest+0xce>
     d4c:	e7 c0       	rjmp	.+462    	; 0xf1c <USB_Device_ProcessControlRequest+0x29c>
     d4e:	0b c0       	rjmp	.+22     	; 0xd66 <USB_Device_ProcessControlRequest+0xe6>
     d50:	80 91 5a 02 	lds	r24, 0x025A
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	09 f0       	breq	.+2      	; 0xd5a <USB_Device_ProcessControlRequest+0xda>
     d58:	e1 c0       	rjmp	.+450    	; 0xf1c <USB_Device_ProcessControlRequest+0x29c>
     d5a:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     d5c:	09 f0       	breq	.+2      	; 0xd60 <USB_Device_ProcessControlRequest+0xe0>
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	80 93 56 02 	sts	0x0256, r24
     d64:	2c c0       	rjmp	.+88     	; 0xdbe <USB_Device_ProcessControlRequest+0x13e>
     d66:	80 91 5a 02 	lds	r24, 0x025A

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     d6a:	88 23       	and	r24, r24
     d6c:	41 f5       	brne	.+80     	; 0xdbe <USB_Device_ProcessControlRequest+0x13e>
     d6e:	20 91 5c 02 	lds	r18, 0x025C
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     d72:	2f 70       	andi	r18, 0x0F	; 15
     d74:	09 f4       	brne	.+2      	; 0xd78 <USB_Device_ProcessControlRequest+0xf8>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     d76:	d2 c0       	rjmp	.+420    	; 0xf1c <USB_Device_ProcessControlRequest+0x29c>
     d78:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d7c:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     d80:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     d82:	1d c0       	rjmp	.+58     	; 0xdbe <USB_Device_ProcessControlRequest+0x13e>
     d84:	80 91 59 02 	lds	r24, 0x0259
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     d88:	83 30       	cpi	r24, 0x03	; 3
     d8a:	21 f4       	brne	.+8      	; 0xd94 <USB_Device_ProcessControlRequest+0x114>
     d8c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d90:	80 62       	ori	r24, 0x20	; 32
     d92:	13 c0       	rjmp	.+38     	; 0xdba <USB_Device_ProcessControlRequest+0x13a>
     d94:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     d98:	80 61       	ori	r24, 0x10	; 16
     d9a:	80 93 eb 00 	sts	0x00EB, r24
     d9e:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <USB_Device_ProcessControlRequest+0x128>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	2a 95       	dec	r18
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <USB_Device_ProcessControlRequest+0x124>
     dac:	80 93 ea 00 	sts	0x00EA, r24
     db0:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     db4:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     db8:	88 60       	ori	r24, 0x08	; 8
     dba:	80 93 eb 00 	sts	0x00EB, r24
     dbe:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dc2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dc6:	87 7f       	andi	r24, 0xF7	; 247
     dc8:	8a c0       	rjmp	.+276    	; 0xede <USB_Device_ProcessControlRequest+0x25e>
     dca:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <USB_Device_ProcessControlRequest+0x150>
     dce:	a6 c0       	rjmp	.+332    	; 0xf1c <USB_Device_ProcessControlRequest+0x29c>
     dd0:	10 91 5a 02 	lds	r17, 0x025A
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     dd4:	1f 77       	andi	r17, 0x7F	; 127
     dd6:	0f b7       	in	r16, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     dd8:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     dda:	80 91 e8 00 	lds	r24, 0x00E8
     dde:	87 7f       	andi	r24, 0xF7	; 247
     de0:	80 93 e8 00 	sts	0x00E8, r24
     de4:	0f dd       	rcall	.-1506   	; 0x804 <Endpoint_ClearStatusStage>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     de6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     dea:	80 ff       	sbrs	r24, 0
     dec:	fc cf       	rjmp	.-8      	; 0xde6 <USB_Device_ProcessControlRequest+0x166>

	while (!(Endpoint_IsINReady()));
     dee:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     df2:	80 78       	andi	r24, 0x80	; 128
     df4:	81 2b       	or	r24, r17
     df6:	80 93 e3 00 	sts	0x00E3, r24

				UDADDR = Temp;
     dfa:	80 68       	ori	r24, 0x80	; 128
     dfc:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     e00:	11 23       	and	r17, r17
     e02:	11 f0       	breq	.+4      	; 0xe08 <USB_Device_ProcessControlRequest+0x188>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     e04:	83 e0       	ldi	r24, 0x03	; 3
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <USB_Device_ProcessControlRequest+0x18a>
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	8e bb       	out	0x1e, r24	; 30
     e0c:	0f bf       	out	0x3f, r16	; 63
     e0e:	86 c0       	rjmp	.+268    	; 0xf1c <USB_Device_ProcessControlRequest+0x29c>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     e10:	80 58       	subi	r24, 0x80	; 128
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     e12:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     e14:	08 f0       	brcs	.+2      	; 0xe18 <USB_Device_ProcessControlRequest+0x198>
     e16:	82 c0       	rjmp	.+260    	; 0xf1c <USB_Device_ProcessControlRequest+0x29c>
     e18:	80 91 5a 02 	lds	r24, 0x025A
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     e1c:	90 91 5b 02 	lds	r25, 0x025B
     e20:	23 e0       	ldi	r18, 0x03	; 3
     e22:	8c 3d       	cpi	r24, 0xDC	; 220
     e24:	92 07       	cpc	r25, r18
     e26:	a9 f5       	brne	.+106    	; 0xe92 <USB_Device_ProcessControlRequest+0x212>
     e28:	83 e0       	ldi	r24, 0x03	; 3
     e2a:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     e2c:	8a e2       	ldi	r24, 0x2A	; 42
     e2e:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     e30:	5f b7       	in	r21, 0x3f	; 63
     e32:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     e34:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     e36:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	4e e0       	ldi	r20, 0x0E	; 14
     e3e:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     e40:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	60 93 57 00 	sts	0x0057, r22
     e48:	e4 91       	lpm	r30, Z
     e4a:	80 ff       	sbrs	r24, 0
     e4c:	03 c0       	rjmp	.+6      	; 0xe54 <USB_Device_ProcessControlRequest+0x1d4>

					if (SerialCharNum & 0x01)
     e4e:	e2 95       	swap	r30
     e50:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     e52:	4f 5f       	subi	r20, 0xFF	; 255
     e54:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     e56:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	ea 30       	cpi	r30, 0x0A	; 10
     e5c:	18 f0       	brcs	.+6      	; 0xe64 <USB_Device_ProcessControlRequest+0x1e4>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     e5e:	29 5c       	subi	r18, 0xC9	; 201
     e60:	3f 4f       	sbci	r19, 0xFF	; 255
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <USB_Device_ProcessControlRequest+0x1e8>
     e64:	20 5d       	subi	r18, 0xD0	; 208
     e66:	3f 4f       	sbci	r19, 0xFF	; 255
     e68:	13 96       	adiw	r26, 0x03	; 3
     e6a:	3c 93       	st	X, r19
     e6c:	2e 93       	st	-X, r18
     e6e:	12 97       	sbiw	r26, 0x02	; 2
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	12 96       	adiw	r26, 0x02	; 2
     e74:	84 31       	cpi	r24, 0x14	; 20
     e76:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     e78:	19 f7       	brne	.-58     	; 0xe40 <USB_Device_ProcessControlRequest+0x1c0>
     e7a:	5f bf       	out	0x3f, r21	; 63
     e7c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e80:	87 7f       	andi	r24, 0xF7	; 247
     e82:	80 93 e8 00 	sts	0x00E8, r24
     e86:	ce 01       	movw	r24, r28
     e88:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     e8a:	6a e2       	ldi	r22, 0x2A	; 42
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	31 de       	rcall	.-926    	; 0xaf2 <Endpoint_Write_Control_Stream_LE>
     e90:	12 c0       	rjmp	.+36     	; 0xeb6 <USB_Device_ProcessControlRequest+0x236>
     e92:	60 91 5c 02 	lds	r22, 0x025C
     e96:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     e98:	4f 5f       	subi	r20, 0xFF	; 255
     e9a:	5f 4f       	sbci	r21, 0xFF	; 255
     e9c:	16 dc       	rcall	.-2004   	; 0x6ca <CALLBACK_USB_GetDescriptor>
     e9e:	bc 01       	movw	r22, r24
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	09 f4       	brne	.+2      	; 0xea6 <USB_Device_ProcessControlRequest+0x226>
     ea4:	3b c0       	rjmp	.+118    	; 0xf1c <USB_Device_ProcessControlRequest+0x29c>
     ea6:	80 91 e8 00 	lds	r24, 0x00E8
     eaa:	87 7f       	andi	r24, 0xF7	; 247
     eac:	80 93 e8 00 	sts	0x00E8, r24
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	81 de       	rcall	.-766    	; 0xbb8 <Endpoint_Write_Control_PStream_LE>
     eb6:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     eba:	8b 77       	andi	r24, 0x7B	; 123
     ebc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ec0:	2d c0       	rjmp	.+90     	; 0xf1c <USB_Device_ProcessControlRequest+0x29c>
     ec2:	80 38       	cpi	r24, 0x80	; 128
     ec4:	59 f5       	brne	.+86     	; 0xf1c <USB_Device_ProcessControlRequest+0x29c>
     ec6:	80 91 e8 00 	lds	r24, 0x00E8
     eca:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     ecc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ed0:	80 91 54 02 	lds	r24, 0x0254
     ed4:	80 93 f1 00 	sts	0x00F1, r24
     ed8:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     edc:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ede:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ee2:	90 dc       	rcall	.-1760   	; 0x804 <Endpoint_ClearStatusStage>
     ee4:	1b c0       	rjmp	.+54     	; 0xf1c <USB_Device_ProcessControlRequest+0x29c>
     ee6:	88 23       	and	r24, r24
     ee8:	c9 f4       	brne	.+50     	; 0xf1c <USB_Device_ProcessControlRequest+0x29c>
     eea:	90 91 5a 02 	lds	r25, 0x025A
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     eee:	92 30       	cpi	r25, 0x02	; 2
     ef0:	a8 f4       	brcc	.+42     	; 0xf1c <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ef2:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     ef6:	87 7f       	andi	r24, 0xF7	; 247
     ef8:	80 93 e8 00 	sts	0x00E8, r24
     efc:	90 93 54 02 	sts	0x0254, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f00:	81 dc       	rcall	.-1790   	; 0x804 <Endpoint_ClearStatusStage>
     f02:	80 91 54 02 	lds	r24, 0x0254
     f06:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     f08:	21 f4       	brne	.+8      	; 0xf12 <USB_Device_ProcessControlRequest+0x292>
     f0a:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     f0e:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <USB_Device_ProcessControlRequest+0x296>
     f12:	84 e0       	ldi	r24, 0x04	; 4
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <USB_Device_ProcessControlRequest+0x298>
     f16:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f18:	8e bb       	out	0x1e, r24	; 30
     f1a:	d0 db       	rcall	.-2144   	; 0x6bc <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     f1c:	80 91 e8 00 	lds	r24, 0x00E8
     f20:	83 ff       	sbrs	r24, 3
     f22:	0a c0       	rjmp	.+20     	; 0xf38 <USB_Device_ProcessControlRequest+0x2b8>
     f24:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
     f28:	80 62       	ori	r24, 0x20	; 32
     f2a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f2e:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     f32:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     f34:	80 93 e8 00 	sts	0x00E8, r24
     f38:	ac 96       	adiw	r28, 0x2c	; 44
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	08 95       	ret

00000f4e <USB_Event_Stub>:

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{

}
     f4e:	08 95       	ret

00000f50 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     f50:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     f52:	8e b3       	in	r24, 0x1e	; 30
     f54:	88 23       	and	r24, r24
     f56:	a9 f0       	breq	.+42     	; 0xf82 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     f58:	80 91 e9 00 	lds	r24, 0x00E9
     f5c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     f5e:	90 91 ec 00 	lds	r25, 0x00EC
     f62:	90 ff       	sbrs	r25, 0
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <USB_USBTask+0x1a>
     f66:	c0 e8       	ldi	r28, 0x80	; 128
     f68:	01 c0       	rjmp	.+2      	; 0xf6c <USB_USBTask+0x1c>
     f6a:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     f6c:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f6e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f72:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     f76:	83 ff       	sbrs	r24, 3
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <USB_USBTask+0x2c>
		  USB_Device_ProcessControlRequest();
     f7a:	82 de       	rcall	.-764    	; 0xc80 <USB_Device_ProcessControlRequest>
     f7c:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f7e:	c0 93 e9 00 	sts	0x00E9, r28
     f82:	cf 91       	pop	r28
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
     f84:	08 95       	ret

00000f86 <CDC_Device_ProcessControlRequest>:
     f86:	cf 93       	push	r28
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f88:	df 93       	push	r29
     f8a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f8c:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     f90:	83 ff       	sbrs	r24, 3
     f92:	a2 c0       	rjmp	.+324    	; 0x10d8 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     f94:	88 81       	ld	r24, Y
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	20 91 5c 02 	lds	r18, 0x025C
     f9c:	30 91 5d 02 	lds	r19, 0x025D
     fa0:	28 17       	cp	r18, r24
     fa2:	39 07       	cpc	r19, r25
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <CDC_Device_ProcessControlRequest+0x22>
     fa6:	98 c0       	rjmp	.+304    	; 0x10d8 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	switch (USB_ControlRequest.bRequest)
     fa8:	80 91 59 02 	lds	r24, 0x0259
     fac:	81 32       	cpi	r24, 0x21	; 33
     fae:	69 f0       	breq	.+26     	; 0xfca <CDC_Device_ProcessControlRequest+0x44>
     fb0:	82 32       	cpi	r24, 0x22	; 34
     fb2:	20 f4       	brcc	.+8      	; 0xfbc <CDC_Device_ProcessControlRequest+0x36>
     fb4:	80 32       	cpi	r24, 0x20	; 32
     fb6:	09 f0       	breq	.+2      	; 0xfba <CDC_Device_ProcessControlRequest+0x34>
     fb8:	8f c0       	rjmp	.+286    	; 0x10d8 <CDC_Device_ProcessControlRequest+0x152>
     fba:	3c c0       	rjmp	.+120    	; 0x1034 <CDC_Device_ProcessControlRequest+0xae>
     fbc:	82 32       	cpi	r24, 0x22	; 34
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <CDC_Device_ProcessControlRequest+0x3c>
     fc0:	6a c0       	rjmp	.+212    	; 0x1096 <CDC_Device_ProcessControlRequest+0x110>
     fc2:	83 32       	cpi	r24, 0x23	; 35
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <CDC_Device_ProcessControlRequest+0x42>
     fc6:	88 c0       	rjmp	.+272    	; 0x10d8 <CDC_Device_ProcessControlRequest+0x152>
     fc8:	79 c0       	rjmp	.+242    	; 0x10bc <CDC_Device_ProcessControlRequest+0x136>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     fca:	80 91 58 02 	lds	r24, 0x0258
     fce:	81 3a       	cpi	r24, 0xA1	; 161
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <CDC_Device_ProcessControlRequest+0x4e>
     fd2:	82 c0       	rjmp	.+260    	; 0x10d8 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fd4:	80 91 e8 00 	lds	r24, 0x00E8
     fd8:	87 7f       	andi	r24, 0xF7	; 247
     fda:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fde:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     fe2:	80 ff       	sbrs	r24, 0
     fe4:	fc cf       	rjmp	.-8      	; 0xfde <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     fe6:	8c 89       	ldd	r24, Y+20	; 0x14
     fe8:	9d 89       	ldd	r25, Y+21	; 0x15
     fea:	ae 89       	ldd	r26, Y+22	; 0x16
     fec:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     fee:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     ff2:	49 2f       	mov	r20, r25
     ff4:	5a 2f       	mov	r21, r26
     ff6:	6b 2f       	mov	r22, r27
     ff8:	77 27       	eor	r23, r23
     ffa:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 16);
     ffe:	ad 01       	movw	r20, r26
    1000:	66 27       	eor	r22, r22
    1002:	77 27       	eor	r23, r23
    1004:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 24);
    1008:	8b 2f       	mov	r24, r27
    100a:	99 27       	eor	r25, r25
    100c:	aa 27       	eor	r26, r26
    100e:	bb 27       	eor	r27, r27
    1010:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1014:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1016:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    101a:	89 8d       	ldd	r24, Y+25	; 0x19
    101c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1020:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1022:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1026:	80 91 e8 00 	lds	r24, 0x00E8
    102a:	8e 77       	andi	r24, 0x7E	; 126
    102c:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1030:	e9 db       	rcall	.-2094   	; 0x804 <Endpoint_ClearStatusStage>
    1032:	52 c0       	rjmp	.+164    	; 0x10d8 <CDC_Device_ProcessControlRequest+0x152>
    1034:	80 91 58 02 	lds	r24, 0x0258
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1038:	81 32       	cpi	r24, 0x21	; 33
    103a:	09 f0       	breq	.+2      	; 0x103e <CDC_Device_ProcessControlRequest+0xb8>
    103c:	4d c0       	rjmp	.+154    	; 0x10d8 <CDC_Device_ProcessControlRequest+0x152>
    103e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1042:	87 7f       	andi	r24, 0xF7	; 247
    1044:	80 93 e8 00 	sts	0x00E8, r24
    1048:	04 c0       	rjmp	.+8      	; 0x1052 <CDC_Device_ProcessControlRequest+0xcc>
    104a:	8e b3       	in	r24, 0x1e	; 30
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    104c:	88 23       	and	r24, r24
    104e:	09 f4       	brne	.+2      	; 0x1052 <CDC_Device_ProcessControlRequest+0xcc>
    1050:	43 c0       	rjmp	.+134    	; 0x10d8 <CDC_Device_ProcessControlRequest+0x152>
    1052:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1056:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1058:	f8 cf       	rjmp	.-16     	; 0x104a <CDC_Device_ProcessControlRequest+0xc4>
    105a:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    105e:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    1062:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    1066:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    106a:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}
				
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    106c:	2d 8b       	std	Y+21, r18	; 0x15
    106e:	9e 8b       	std	Y+22, r25	; 0x16
    1070:	8f 8b       	std	Y+23, r24	; 0x17
    1072:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1076:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    1078:	80 91 f1 00 	lds	r24, 0x00F1
    107c:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    107e:	80 91 f1 00 	lds	r24, 0x00F1
    1082:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1084:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1088:	8b 77       	andi	r24, 0x7B	; 123
    108a:	80 93 e8 00 	sts	0x00E8, r24
    108e:	ba db       	rcall	.-2188   	; 0x804 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1090:	ce 01       	movw	r24, r28
    1092:	1a db       	rcall	.-2508   	; 0x6c8 <EVENT_CDC_Device_LineEncodingChanged>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1094:	21 c0       	rjmp	.+66     	; 0x10d8 <CDC_Device_ProcessControlRequest+0x152>
    1096:	80 91 58 02 	lds	r24, 0x0258
    109a:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    109c:	e9 f4       	brne	.+58     	; 0x10d8 <CDC_Device_ProcessControlRequest+0x152>
    109e:	80 91 e8 00 	lds	r24, 0x00E8
    10a2:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10a4:	80 93 e8 00 	sts	0x00E8, r24
    10a8:	ad db       	rcall	.-2214   	; 0x804 <Endpoint_ClearStatusStage>
    10aa:	80 91 5a 02 	lds	r24, 0x025A
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    10ae:	90 91 5b 02 	lds	r25, 0x025B

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    10b2:	99 8b       	std	Y+17, r25	; 0x11
    10b4:	88 8b       	std	Y+16, r24	; 0x10
    10b6:	ce 01       	movw	r24, r28
    10b8:	c7 d0       	rcall	.+398    	; 0x1248 <CDC_Device_Event_Stub>
    10ba:	0e c0       	rjmp	.+28     	; 0x10d8 <CDC_Device_ProcessControlRequest+0x152>
    10bc:	80 91 58 02 	lds	r24, 0x0258

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    10c0:	81 32       	cpi	r24, 0x21	; 33
    10c2:	51 f4       	brne	.+20     	; 0x10d8 <CDC_Device_ProcessControlRequest+0x152>
    10c4:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    10c8:	87 7f       	andi	r24, 0xF7	; 247
    10ca:	80 93 e8 00 	sts	0x00E8, r24
    10ce:	9a db       	rcall	.-2252   	; 0x804 <Endpoint_ClearStatusStage>
    10d0:	ce 01       	movw	r24, r28
    10d2:	60 91 5a 02 	lds	r22, 0x025A
    10d6:	b8 d0       	rcall	.+368    	; 0x1248 <CDC_Device_Event_Stub>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    10dc:	08 95       	ret

000010de <CDC_Device_ConfigureEndpoints>:
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	ec 01       	movw	r28, r24
    10e4:	40 96       	adiw	r24, 0x10	; 16
			}

			break;
	}
}
    10e6:	fc 01       	movw	r30, r24
    10e8:	8b e0       	ldi	r24, 0x0B	; 11
    10ea:	df 01       	movw	r26, r30

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    10ec:	1d 92       	st	X+, r1
    10ee:	8a 95       	dec	r24
    10f0:	e9 f7       	brne	.-6      	; 0x10ec <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    10f2:	82 e0       	ldi	r24, 0x02	; 2
    10f4:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    10f6:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    10f8:	83 e0       	ldi	r24, 0x03	; 3
    10fa:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    10fc:	ce 01       	movw	r24, r28
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	61 e0       	ldi	r22, 0x01	; 1
    1102:	44 db       	rcall	.-2424   	; 0x78c <Endpoint_ConfigureEndpointTable>
    1104:	88 23       	and	r24, r24
    1106:	59 f0       	breq	.+22     	; 0x111e <CDC_Device_ConfigureEndpoints+0x40>
    1108:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    110a:	06 96       	adiw	r24, 0x06	; 6
    110c:	61 e0       	ldi	r22, 0x01	; 1
    110e:	3e db       	rcall	.-2436   	; 0x78c <Endpoint_ConfigureEndpointTable>
    1110:	88 23       	and	r24, r24
    1112:	29 f0       	breq	.+10     	; 0x111e <CDC_Device_ConfigureEndpoints+0x40>
    1114:	ce 01       	movw	r24, r28
    1116:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    1118:	61 e0       	ldi	r22, 0x01	; 1
    111a:	38 db       	rcall	.-2448   	; 0x78c <Endpoint_ConfigureEndpointTable>
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <CDC_Device_ConfigureEndpoints+0x42>
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
    1124:	08 95       	ret

00001126 <CDC_Device_SendByte>:

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
    1126:	cf 93       	push	r28
    1128:	fc 01       	movw	r30, r24
    112a:	c6 2f       	mov	r28, r22
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    112c:	8e b3       	in	r24, 0x1e	; 30
    112e:	84 30       	cpi	r24, 0x04	; 4
    1130:	e9 f4       	brne	.+58     	; 0x116c <CDC_Device_SendByte+0x46>
    1132:	44 89       	ldd	r20, Z+20	; 0x14
    1134:	55 89       	ldd	r21, Z+21	; 0x15
    1136:	66 89       	ldd	r22, Z+22	; 0x16
    1138:	77 89       	ldd	r23, Z+23	; 0x17
    113a:	41 15       	cp	r20, r1
    113c:	51 05       	cpc	r21, r1
    113e:	61 05       	cpc	r22, r1
    1140:	71 05       	cpc	r23, r1
    1142:	a1 f0       	breq	.+40     	; 0x116c <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1144:	81 81       	ldd	r24, Z+1	; 0x01
    1146:	8f 70       	andi	r24, 0x0F	; 15
    1148:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    114c:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    1150:	85 fd       	sbrc	r24, 5
    1152:	08 c0       	rjmp	.+16     	; 0x1164 <CDC_Device_SendByte+0x3e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1154:	80 91 e8 00 	lds	r24, 0x00E8
    1158:	8e 77       	andi	r24, 0x7E	; 126
    115a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    115e:	71 db       	rcall	.-2334   	; 0x842 <Endpoint_WaitUntilReady>
    1160:	88 23       	and	r24, r24
    1162:	29 f4       	brne	.+10     	; 0x116e <CDC_Device_SendByte+0x48>
    1164:	c0 93 f1 00 	sts	0x00F1, r28
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1168:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    116a:	01 c0       	rjmp	.+2      	; 0x116e <CDC_Device_SendByte+0x48>
    116c:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    116e:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    1170:	08 95       	ret

00001172 <CDC_Device_Flush>:
    1172:	fc 01       	movw	r30, r24

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1174:	8e b3       	in	r24, 0x1e	; 30
    1176:	84 30       	cpi	r24, 0x04	; 4
    1178:	19 f5       	brne	.+70     	; 0x11c0 <CDC_Device_Flush+0x4e>
    117a:	44 89       	ldd	r20, Z+20	; 0x14
    117c:	55 89       	ldd	r21, Z+21	; 0x15
    117e:	66 89       	ldd	r22, Z+22	; 0x16
    1180:	77 89       	ldd	r23, Z+23	; 0x17
    1182:	41 15       	cp	r20, r1
    1184:	51 05       	cpc	r21, r1
    1186:	61 05       	cpc	r22, r1
    1188:	71 05       	cpc	r23, r1
    118a:	d1 f0       	breq	.+52     	; 0x11c0 <CDC_Device_Flush+0x4e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    118c:	81 81       	ldd	r24, Z+1	; 0x01
    118e:	8f 70       	andi	r24, 0x0F	; 15
    1190:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1194:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    1198:	88 23       	and	r24, r24
    119a:	a1 f0       	breq	.+40     	; 0x11c4 <CDC_Device_Flush+0x52>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    119c:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11a0:	80 91 e8 00 	lds	r24, 0x00E8
    11a4:	8e 77       	andi	r24, 0x7E	; 126
    11a6:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    11aa:	95 fd       	sbrc	r25, 5
    11ac:	0d c0       	rjmp	.+26     	; 0x11c8 <CDC_Device_Flush+0x56>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    11ae:	49 db       	rcall	.-2414   	; 0x842 <Endpoint_WaitUntilReady>
    11b0:	88 23       	and	r24, r24
    11b2:	59 f4       	brne	.+22     	; 0x11ca <CDC_Device_Flush+0x58>
    11b4:	90 91 e8 00 	lds	r25, 0x00E8
    11b8:	9e 77       	andi	r25, 0x7E	; 126
    11ba:	90 93 e8 00 	sts	0x00E8, r25
    11be:	08 95       	ret
    11c0:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    11c2:	08 95       	ret
    11c4:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
    11c6:	08 95       	ret
    11c8:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    11ca:	08 95       	ret

000011cc <CDC_Device_USBTask>:
}
    11cc:	2e b3       	in	r18, 0x1e	; 30
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    11ce:	24 30       	cpi	r18, 0x04	; 4
    11d0:	59 f4       	brne	.+22     	; 0x11e8 <CDC_Device_USBTask+0x1c>
    11d2:	fc 01       	movw	r30, r24
    11d4:	44 89       	ldd	r20, Z+20	; 0x14
    11d6:	55 89       	ldd	r21, Z+21	; 0x15
    11d8:	66 89       	ldd	r22, Z+22	; 0x16
    11da:	77 89       	ldd	r23, Z+23	; 0x17
    11dc:	41 15       	cp	r20, r1
    11de:	51 05       	cpc	r21, r1
    11e0:	61 05       	cpc	r22, r1
    11e2:	71 05       	cpc	r23, r1
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <CDC_Device_USBTask+0x1c>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
    11e6:	c5 cf       	rjmp	.-118    	; 0x1172 <CDC_Device_Flush>
    11e8:	08 95       	ret

000011ea <CDC_Device_ReceiveByte>:
    11ea:	fc 01       	movw	r30, r24
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    11ec:	8e b3       	in	r24, 0x1e	; 30
    11ee:	84 30       	cpi	r24, 0x04	; 4
    11f0:	29 f5       	brne	.+74     	; 0x123c <CDC_Device_ReceiveByte+0x52>
    11f2:	44 89       	ldd	r20, Z+20	; 0x14
    11f4:	55 89       	ldd	r21, Z+21	; 0x15
    11f6:	66 89       	ldd	r22, Z+22	; 0x16
    11f8:	77 89       	ldd	r23, Z+23	; 0x17
    11fa:	41 15       	cp	r20, r1
    11fc:	51 05       	cpc	r21, r1
    11fe:	61 05       	cpc	r22, r1
    1200:	71 05       	cpc	r23, r1
    1202:	e1 f0       	breq	.+56     	; 0x123c <CDC_Device_ReceiveByte+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1204:	86 81       	ldd	r24, Z+6	; 0x06
    1206:	8f 70       	andi	r24, 0x0F	; 15
    1208:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    120c:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1210:	82 ff       	sbrs	r24, 2
    1212:	17 c0       	rjmp	.+46     	; 0x1242 <CDC_Device_ReceiveByte+0x58>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1214:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    1218:	88 23       	and	r24, r24
    121a:	21 f0       	breq	.+8      	; 0x1224 <CDC_Device_ReceiveByte+0x3a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    121c:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <CDC_Device_ReceiveByte+0x3e>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1224:	8f ef       	ldi	r24, 0xFF	; 255
    1226:	9f ef       	ldi	r25, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1228:	20 91 f2 00 	lds	r18, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    122c:	22 23       	and	r18, r18
    122e:	59 f4       	brne	.+22     	; 0x1246 <CDC_Device_ReceiveByte+0x5c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1230:	20 91 e8 00 	lds	r18, 0x00E8
    1234:	2b 77       	andi	r18, 0x7B	; 123
    1236:	20 93 e8 00 	sts	0x00E8, r18
    123a:	08 95       	ret
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    123c:	8f ef       	ldi	r24, 0xFF	; 255
    123e:	9f ef       	ldi	r25, 0xFF	; 255
    1240:	08 95       	ret

	int16_t ReceivedByte = -1;
    1242:	8f ef       	ldi	r24, 0xFF	; 255
    1244:	9f ef       	ldi	r25, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1246:	08 95       	ret

00001248 <CDC_Device_Event_Stub>:

// cppcheck-suppress unusedFunction
void CDC_Device_Event_Stub(void)
{

}
    1248:	08 95       	ret

0000124a <__divsf3>:
    124a:	0c d0       	rcall	.+24     	; 0x1264 <__divsf3x>
    124c:	e6 c0       	rjmp	.+460    	; 0x141a <__fp_round>
    124e:	de d0       	rcall	.+444    	; 0x140c <__fp_pscB>
    1250:	40 f0       	brcs	.+16     	; 0x1262 <__divsf3+0x18>
    1252:	d5 d0       	rcall	.+426    	; 0x13fe <__fp_pscA>
    1254:	30 f0       	brcs	.+12     	; 0x1262 <__divsf3+0x18>
    1256:	21 f4       	brne	.+8      	; 0x1260 <__divsf3+0x16>
    1258:	5f 3f       	cpi	r21, 0xFF	; 255
    125a:	19 f0       	breq	.+6      	; 0x1262 <__divsf3+0x18>
    125c:	c7 c0       	rjmp	.+398    	; 0x13ec <__fp_inf>
    125e:	51 11       	cpse	r21, r1
    1260:	10 c1       	rjmp	.+544    	; 0x1482 <__fp_szero>
    1262:	ca c0       	rjmp	.+404    	; 0x13f8 <__fp_nan>

00001264 <__divsf3x>:
    1264:	eb d0       	rcall	.+470    	; 0x143c <__fp_split3>
    1266:	98 f3       	brcs	.-26     	; 0x124e <__divsf3+0x4>

00001268 <__divsf3_pse>:
    1268:	99 23       	and	r25, r25
    126a:	c9 f3       	breq	.-14     	; 0x125e <__divsf3+0x14>
    126c:	55 23       	and	r21, r21
    126e:	b1 f3       	breq	.-20     	; 0x125c <__divsf3+0x12>
    1270:	95 1b       	sub	r25, r21
    1272:	55 0b       	sbc	r21, r21
    1274:	bb 27       	eor	r27, r27
    1276:	aa 27       	eor	r26, r26
    1278:	62 17       	cp	r22, r18
    127a:	73 07       	cpc	r23, r19
    127c:	84 07       	cpc	r24, r20
    127e:	38 f0       	brcs	.+14     	; 0x128e <__divsf3_pse+0x26>
    1280:	9f 5f       	subi	r25, 0xFF	; 255
    1282:	5f 4f       	sbci	r21, 0xFF	; 255
    1284:	22 0f       	add	r18, r18
    1286:	33 1f       	adc	r19, r19
    1288:	44 1f       	adc	r20, r20
    128a:	aa 1f       	adc	r26, r26
    128c:	a9 f3       	breq	.-22     	; 0x1278 <__divsf3_pse+0x10>
    128e:	33 d0       	rcall	.+102    	; 0x12f6 <__divsf3_pse+0x8e>
    1290:	0e 2e       	mov	r0, r30
    1292:	3a f0       	brmi	.+14     	; 0x12a2 <__divsf3_pse+0x3a>
    1294:	e0 e8       	ldi	r30, 0x80	; 128
    1296:	30 d0       	rcall	.+96     	; 0x12f8 <__divsf3_pse+0x90>
    1298:	91 50       	subi	r25, 0x01	; 1
    129a:	50 40       	sbci	r21, 0x00	; 0
    129c:	e6 95       	lsr	r30
    129e:	00 1c       	adc	r0, r0
    12a0:	ca f7       	brpl	.-14     	; 0x1294 <__divsf3_pse+0x2c>
    12a2:	29 d0       	rcall	.+82     	; 0x12f6 <__divsf3_pse+0x8e>
    12a4:	fe 2f       	mov	r31, r30
    12a6:	27 d0       	rcall	.+78     	; 0x12f6 <__divsf3_pse+0x8e>
    12a8:	66 0f       	add	r22, r22
    12aa:	77 1f       	adc	r23, r23
    12ac:	88 1f       	adc	r24, r24
    12ae:	bb 1f       	adc	r27, r27
    12b0:	26 17       	cp	r18, r22
    12b2:	37 07       	cpc	r19, r23
    12b4:	48 07       	cpc	r20, r24
    12b6:	ab 07       	cpc	r26, r27
    12b8:	b0 e8       	ldi	r27, 0x80	; 128
    12ba:	09 f0       	breq	.+2      	; 0x12be <__divsf3_pse+0x56>
    12bc:	bb 0b       	sbc	r27, r27
    12be:	80 2d       	mov	r24, r0
    12c0:	bf 01       	movw	r22, r30
    12c2:	ff 27       	eor	r31, r31
    12c4:	93 58       	subi	r25, 0x83	; 131
    12c6:	5f 4f       	sbci	r21, 0xFF	; 255
    12c8:	2a f0       	brmi	.+10     	; 0x12d4 <__divsf3_pse+0x6c>
    12ca:	9e 3f       	cpi	r25, 0xFE	; 254
    12cc:	51 05       	cpc	r21, r1
    12ce:	68 f0       	brcs	.+26     	; 0x12ea <__divsf3_pse+0x82>
    12d0:	8d c0       	rjmp	.+282    	; 0x13ec <__fp_inf>
    12d2:	d7 c0       	rjmp	.+430    	; 0x1482 <__fp_szero>
    12d4:	5f 3f       	cpi	r21, 0xFF	; 255
    12d6:	ec f3       	brlt	.-6      	; 0x12d2 <__divsf3_pse+0x6a>
    12d8:	98 3e       	cpi	r25, 0xE8	; 232
    12da:	dc f3       	brlt	.-10     	; 0x12d2 <__divsf3_pse+0x6a>
    12dc:	86 95       	lsr	r24
    12de:	77 95       	ror	r23
    12e0:	67 95       	ror	r22
    12e2:	b7 95       	ror	r27
    12e4:	f7 95       	ror	r31
    12e6:	9f 5f       	subi	r25, 0xFF	; 255
    12e8:	c9 f7       	brne	.-14     	; 0x12dc <__divsf3_pse+0x74>
    12ea:	88 0f       	add	r24, r24
    12ec:	91 1d       	adc	r25, r1
    12ee:	96 95       	lsr	r25
    12f0:	87 95       	ror	r24
    12f2:	97 f9       	bld	r25, 7
    12f4:	08 95       	ret
    12f6:	e1 e0       	ldi	r30, 0x01	; 1
    12f8:	66 0f       	add	r22, r22
    12fa:	77 1f       	adc	r23, r23
    12fc:	88 1f       	adc	r24, r24
    12fe:	bb 1f       	adc	r27, r27
    1300:	62 17       	cp	r22, r18
    1302:	73 07       	cpc	r23, r19
    1304:	84 07       	cpc	r24, r20
    1306:	ba 07       	cpc	r27, r26
    1308:	20 f0       	brcs	.+8      	; 0x1312 <__divsf3_pse+0xaa>
    130a:	62 1b       	sub	r22, r18
    130c:	73 0b       	sbc	r23, r19
    130e:	84 0b       	sbc	r24, r20
    1310:	ba 0b       	sbc	r27, r26
    1312:	ee 1f       	adc	r30, r30
    1314:	88 f7       	brcc	.-30     	; 0x12f8 <__divsf3_pse+0x90>
    1316:	e0 95       	com	r30
    1318:	08 95       	ret

0000131a <__fixunssfsi>:
    131a:	98 d0       	rcall	.+304    	; 0x144c <__fp_splitA>
    131c:	88 f0       	brcs	.+34     	; 0x1340 <__fixunssfsi+0x26>
    131e:	9f 57       	subi	r25, 0x7F	; 127
    1320:	90 f0       	brcs	.+36     	; 0x1346 <__fixunssfsi+0x2c>
    1322:	b9 2f       	mov	r27, r25
    1324:	99 27       	eor	r25, r25
    1326:	b7 51       	subi	r27, 0x17	; 23
    1328:	a0 f0       	brcs	.+40     	; 0x1352 <__fixunssfsi+0x38>
    132a:	d1 f0       	breq	.+52     	; 0x1360 <__fixunssfsi+0x46>
    132c:	66 0f       	add	r22, r22
    132e:	77 1f       	adc	r23, r23
    1330:	88 1f       	adc	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	1a f0       	brmi	.+6      	; 0x133c <__fixunssfsi+0x22>
    1336:	ba 95       	dec	r27
    1338:	c9 f7       	brne	.-14     	; 0x132c <__fixunssfsi+0x12>
    133a:	12 c0       	rjmp	.+36     	; 0x1360 <__fixunssfsi+0x46>
    133c:	b1 30       	cpi	r27, 0x01	; 1
    133e:	81 f0       	breq	.+32     	; 0x1360 <__fixunssfsi+0x46>
    1340:	9f d0       	rcall	.+318    	; 0x1480 <__fp_zero>
    1342:	b1 e0       	ldi	r27, 0x01	; 1
    1344:	08 95       	ret
    1346:	9c c0       	rjmp	.+312    	; 0x1480 <__fp_zero>
    1348:	67 2f       	mov	r22, r23
    134a:	78 2f       	mov	r23, r24
    134c:	88 27       	eor	r24, r24
    134e:	b8 5f       	subi	r27, 0xF8	; 248
    1350:	39 f0       	breq	.+14     	; 0x1360 <__fixunssfsi+0x46>
    1352:	b9 3f       	cpi	r27, 0xF9	; 249
    1354:	cc f3       	brlt	.-14     	; 0x1348 <__fixunssfsi+0x2e>
    1356:	86 95       	lsr	r24
    1358:	77 95       	ror	r23
    135a:	67 95       	ror	r22
    135c:	b3 95       	inc	r27
    135e:	d9 f7       	brne	.-10     	; 0x1356 <__fixunssfsi+0x3c>
    1360:	3e f4       	brtc	.+14     	; 0x1370 <__fixunssfsi+0x56>
    1362:	90 95       	com	r25
    1364:	80 95       	com	r24
    1366:	70 95       	com	r23
    1368:	61 95       	neg	r22
    136a:	7f 4f       	sbci	r23, 0xFF	; 255
    136c:	8f 4f       	sbci	r24, 0xFF	; 255
    136e:	9f 4f       	sbci	r25, 0xFF	; 255
    1370:	08 95       	ret

00001372 <__floatunsisf>:
    1372:	e8 94       	clt
    1374:	09 c0       	rjmp	.+18     	; 0x1388 <__floatsisf+0x12>

00001376 <__floatsisf>:
    1376:	97 fb       	bst	r25, 7
    1378:	3e f4       	brtc	.+14     	; 0x1388 <__floatsisf+0x12>
    137a:	90 95       	com	r25
    137c:	80 95       	com	r24
    137e:	70 95       	com	r23
    1380:	61 95       	neg	r22
    1382:	7f 4f       	sbci	r23, 0xFF	; 255
    1384:	8f 4f       	sbci	r24, 0xFF	; 255
    1386:	9f 4f       	sbci	r25, 0xFF	; 255
    1388:	99 23       	and	r25, r25
    138a:	a9 f0       	breq	.+42     	; 0x13b6 <__floatsisf+0x40>
    138c:	f9 2f       	mov	r31, r25
    138e:	96 e9       	ldi	r25, 0x96	; 150
    1390:	bb 27       	eor	r27, r27
    1392:	93 95       	inc	r25
    1394:	f6 95       	lsr	r31
    1396:	87 95       	ror	r24
    1398:	77 95       	ror	r23
    139a:	67 95       	ror	r22
    139c:	b7 95       	ror	r27
    139e:	f1 11       	cpse	r31, r1
    13a0:	f8 cf       	rjmp	.-16     	; 0x1392 <__floatsisf+0x1c>
    13a2:	fa f4       	brpl	.+62     	; 0x13e2 <__floatsisf+0x6c>
    13a4:	bb 0f       	add	r27, r27
    13a6:	11 f4       	brne	.+4      	; 0x13ac <__floatsisf+0x36>
    13a8:	60 ff       	sbrs	r22, 0
    13aa:	1b c0       	rjmp	.+54     	; 0x13e2 <__floatsisf+0x6c>
    13ac:	6f 5f       	subi	r22, 0xFF	; 255
    13ae:	7f 4f       	sbci	r23, 0xFF	; 255
    13b0:	8f 4f       	sbci	r24, 0xFF	; 255
    13b2:	9f 4f       	sbci	r25, 0xFF	; 255
    13b4:	16 c0       	rjmp	.+44     	; 0x13e2 <__floatsisf+0x6c>
    13b6:	88 23       	and	r24, r24
    13b8:	11 f0       	breq	.+4      	; 0x13be <__floatsisf+0x48>
    13ba:	96 e9       	ldi	r25, 0x96	; 150
    13bc:	11 c0       	rjmp	.+34     	; 0x13e0 <__floatsisf+0x6a>
    13be:	77 23       	and	r23, r23
    13c0:	21 f0       	breq	.+8      	; 0x13ca <__floatsisf+0x54>
    13c2:	9e e8       	ldi	r25, 0x8E	; 142
    13c4:	87 2f       	mov	r24, r23
    13c6:	76 2f       	mov	r23, r22
    13c8:	05 c0       	rjmp	.+10     	; 0x13d4 <__floatsisf+0x5e>
    13ca:	66 23       	and	r22, r22
    13cc:	71 f0       	breq	.+28     	; 0x13ea <__floatsisf+0x74>
    13ce:	96 e8       	ldi	r25, 0x86	; 134
    13d0:	86 2f       	mov	r24, r22
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	2a f0       	brmi	.+10     	; 0x13e2 <__floatsisf+0x6c>
    13d8:	9a 95       	dec	r25
    13da:	66 0f       	add	r22, r22
    13dc:	77 1f       	adc	r23, r23
    13de:	88 1f       	adc	r24, r24
    13e0:	da f7       	brpl	.-10     	; 0x13d8 <__floatsisf+0x62>
    13e2:	88 0f       	add	r24, r24
    13e4:	96 95       	lsr	r25
    13e6:	87 95       	ror	r24
    13e8:	97 f9       	bld	r25, 7
    13ea:	08 95       	ret

000013ec <__fp_inf>:
    13ec:	97 f9       	bld	r25, 7
    13ee:	9f 67       	ori	r25, 0x7F	; 127
    13f0:	80 e8       	ldi	r24, 0x80	; 128
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	08 95       	ret

000013f8 <__fp_nan>:
    13f8:	9f ef       	ldi	r25, 0xFF	; 255
    13fa:	80 ec       	ldi	r24, 0xC0	; 192
    13fc:	08 95       	ret

000013fe <__fp_pscA>:
    13fe:	00 24       	eor	r0, r0
    1400:	0a 94       	dec	r0
    1402:	16 16       	cp	r1, r22
    1404:	17 06       	cpc	r1, r23
    1406:	18 06       	cpc	r1, r24
    1408:	09 06       	cpc	r0, r25
    140a:	08 95       	ret

0000140c <__fp_pscB>:
    140c:	00 24       	eor	r0, r0
    140e:	0a 94       	dec	r0
    1410:	12 16       	cp	r1, r18
    1412:	13 06       	cpc	r1, r19
    1414:	14 06       	cpc	r1, r20
    1416:	05 06       	cpc	r0, r21
    1418:	08 95       	ret

0000141a <__fp_round>:
    141a:	09 2e       	mov	r0, r25
    141c:	03 94       	inc	r0
    141e:	00 0c       	add	r0, r0
    1420:	11 f4       	brne	.+4      	; 0x1426 <__fp_round+0xc>
    1422:	88 23       	and	r24, r24
    1424:	52 f0       	brmi	.+20     	; 0x143a <__fp_round+0x20>
    1426:	bb 0f       	add	r27, r27
    1428:	40 f4       	brcc	.+16     	; 0x143a <__fp_round+0x20>
    142a:	bf 2b       	or	r27, r31
    142c:	11 f4       	brne	.+4      	; 0x1432 <__fp_round+0x18>
    142e:	60 ff       	sbrs	r22, 0
    1430:	04 c0       	rjmp	.+8      	; 0x143a <__fp_round+0x20>
    1432:	6f 5f       	subi	r22, 0xFF	; 255
    1434:	7f 4f       	sbci	r23, 0xFF	; 255
    1436:	8f 4f       	sbci	r24, 0xFF	; 255
    1438:	9f 4f       	sbci	r25, 0xFF	; 255
    143a:	08 95       	ret

0000143c <__fp_split3>:
    143c:	57 fd       	sbrc	r21, 7
    143e:	90 58       	subi	r25, 0x80	; 128
    1440:	44 0f       	add	r20, r20
    1442:	55 1f       	adc	r21, r21
    1444:	59 f0       	breq	.+22     	; 0x145c <__fp_splitA+0x10>
    1446:	5f 3f       	cpi	r21, 0xFF	; 255
    1448:	71 f0       	breq	.+28     	; 0x1466 <__fp_splitA+0x1a>
    144a:	47 95       	ror	r20

0000144c <__fp_splitA>:
    144c:	88 0f       	add	r24, r24
    144e:	97 fb       	bst	r25, 7
    1450:	99 1f       	adc	r25, r25
    1452:	61 f0       	breq	.+24     	; 0x146c <__fp_splitA+0x20>
    1454:	9f 3f       	cpi	r25, 0xFF	; 255
    1456:	79 f0       	breq	.+30     	; 0x1476 <__fp_splitA+0x2a>
    1458:	87 95       	ror	r24
    145a:	08 95       	ret
    145c:	12 16       	cp	r1, r18
    145e:	13 06       	cpc	r1, r19
    1460:	14 06       	cpc	r1, r20
    1462:	55 1f       	adc	r21, r21
    1464:	f2 cf       	rjmp	.-28     	; 0x144a <__fp_split3+0xe>
    1466:	46 95       	lsr	r20
    1468:	f1 df       	rcall	.-30     	; 0x144c <__fp_splitA>
    146a:	08 c0       	rjmp	.+16     	; 0x147c <__fp_splitA+0x30>
    146c:	16 16       	cp	r1, r22
    146e:	17 06       	cpc	r1, r23
    1470:	18 06       	cpc	r1, r24
    1472:	99 1f       	adc	r25, r25
    1474:	f1 cf       	rjmp	.-30     	; 0x1458 <__fp_splitA+0xc>
    1476:	86 95       	lsr	r24
    1478:	71 05       	cpc	r23, r1
    147a:	61 05       	cpc	r22, r1
    147c:	08 94       	sec
    147e:	08 95       	ret

00001480 <__fp_zero>:
    1480:	e8 94       	clt

00001482 <__fp_szero>:
    1482:	bb 27       	eor	r27, r27
    1484:	66 27       	eor	r22, r22
    1486:	77 27       	eor	r23, r23
    1488:	cb 01       	movw	r24, r22
    148a:	97 f9       	bld	r25, 7
    148c:	08 95       	ret

0000148e <__mulsf3>:
    148e:	0a d0       	rcall	.+20     	; 0x14a4 <__mulsf3x>
    1490:	c4 cf       	rjmp	.-120    	; 0x141a <__fp_round>
    1492:	b5 df       	rcall	.-150    	; 0x13fe <__fp_pscA>
    1494:	28 f0       	brcs	.+10     	; 0x14a0 <__mulsf3+0x12>
    1496:	ba df       	rcall	.-140    	; 0x140c <__fp_pscB>
    1498:	18 f0       	brcs	.+6      	; 0x14a0 <__mulsf3+0x12>
    149a:	95 23       	and	r25, r21
    149c:	09 f0       	breq	.+2      	; 0x14a0 <__mulsf3+0x12>
    149e:	a6 cf       	rjmp	.-180    	; 0x13ec <__fp_inf>
    14a0:	ab cf       	rjmp	.-170    	; 0x13f8 <__fp_nan>
    14a2:	ef cf       	rjmp	.-34     	; 0x1482 <__fp_szero>

000014a4 <__mulsf3x>:
    14a4:	cb df       	rcall	.-106    	; 0x143c <__fp_split3>
    14a6:	a8 f3       	brcs	.-22     	; 0x1492 <__mulsf3+0x4>

000014a8 <__mulsf3_pse>:
    14a8:	99 23       	and	r25, r25
    14aa:	d9 f3       	breq	.-10     	; 0x14a2 <__mulsf3+0x14>
    14ac:	55 23       	and	r21, r21
    14ae:	c9 f3       	breq	.-14     	; 0x14a2 <__mulsf3+0x14>
    14b0:	95 0f       	add	r25, r21
    14b2:	50 e0       	ldi	r21, 0x00	; 0
    14b4:	55 1f       	adc	r21, r21
    14b6:	aa 27       	eor	r26, r26
    14b8:	ee 27       	eor	r30, r30
    14ba:	ff 27       	eor	r31, r31
    14bc:	bb 27       	eor	r27, r27
    14be:	00 24       	eor	r0, r0
    14c0:	08 94       	sec
    14c2:	67 95       	ror	r22
    14c4:	20 f4       	brcc	.+8      	; 0x14ce <__mulsf3_pse+0x26>
    14c6:	e2 0f       	add	r30, r18
    14c8:	f3 1f       	adc	r31, r19
    14ca:	b4 1f       	adc	r27, r20
    14cc:	0a 1e       	adc	r0, r26
    14ce:	22 0f       	add	r18, r18
    14d0:	33 1f       	adc	r19, r19
    14d2:	44 1f       	adc	r20, r20
    14d4:	aa 1f       	adc	r26, r26
    14d6:	66 95       	lsr	r22
    14d8:	a9 f7       	brne	.-22     	; 0x14c4 <__mulsf3_pse+0x1c>
    14da:	77 95       	ror	r23
    14dc:	30 f4       	brcc	.+12     	; 0x14ea <__mulsf3_pse+0x42>
    14de:	f3 0f       	add	r31, r19
    14e0:	b4 1f       	adc	r27, r20
    14e2:	0a 1e       	adc	r0, r26
    14e4:	12 1e       	adc	r1, r18
    14e6:	08 f4       	brcc	.+2      	; 0x14ea <__mulsf3_pse+0x42>
    14e8:	63 95       	inc	r22
    14ea:	33 0f       	add	r19, r19
    14ec:	44 1f       	adc	r20, r20
    14ee:	aa 1f       	adc	r26, r26
    14f0:	22 1f       	adc	r18, r18
    14f2:	76 95       	lsr	r23
    14f4:	99 f7       	brne	.-26     	; 0x14dc <__mulsf3_pse+0x34>
    14f6:	87 95       	ror	r24
    14f8:	20 f4       	brcc	.+8      	; 0x1502 <__mulsf3_pse+0x5a>
    14fa:	b4 0f       	add	r27, r20
    14fc:	0a 1e       	adc	r0, r26
    14fe:	12 1e       	adc	r1, r18
    1500:	63 1f       	adc	r22, r19
    1502:	44 0f       	add	r20, r20
    1504:	aa 1f       	adc	r26, r26
    1506:	22 1f       	adc	r18, r18
    1508:	33 1f       	adc	r19, r19
    150a:	86 95       	lsr	r24
    150c:	a9 f7       	brne	.-22     	; 0x14f8 <__mulsf3_pse+0x50>
    150e:	86 2f       	mov	r24, r22
    1510:	71 2d       	mov	r23, r1
    1512:	60 2d       	mov	r22, r0
    1514:	11 24       	eor	r1, r1
    1516:	9f 57       	subi	r25, 0x7F	; 127
    1518:	50 40       	sbci	r21, 0x00	; 0
    151a:	8a f0       	brmi	.+34     	; 0x153e <__mulsf3_pse+0x96>
    151c:	e1 f0       	breq	.+56     	; 0x1556 <__mulsf3_pse+0xae>
    151e:	88 23       	and	r24, r24
    1520:	4a f0       	brmi	.+18     	; 0x1534 <__mulsf3_pse+0x8c>
    1522:	ee 0f       	add	r30, r30
    1524:	ff 1f       	adc	r31, r31
    1526:	bb 1f       	adc	r27, r27
    1528:	66 1f       	adc	r22, r22
    152a:	77 1f       	adc	r23, r23
    152c:	88 1f       	adc	r24, r24
    152e:	91 50       	subi	r25, 0x01	; 1
    1530:	50 40       	sbci	r21, 0x00	; 0
    1532:	a9 f7       	brne	.-22     	; 0x151e <__mulsf3_pse+0x76>
    1534:	9e 3f       	cpi	r25, 0xFE	; 254
    1536:	51 05       	cpc	r21, r1
    1538:	70 f0       	brcs	.+28     	; 0x1556 <__mulsf3_pse+0xae>
    153a:	58 cf       	rjmp	.-336    	; 0x13ec <__fp_inf>
    153c:	a2 cf       	rjmp	.-188    	; 0x1482 <__fp_szero>
    153e:	5f 3f       	cpi	r21, 0xFF	; 255
    1540:	ec f3       	brlt	.-6      	; 0x153c <__mulsf3_pse+0x94>
    1542:	98 3e       	cpi	r25, 0xE8	; 232
    1544:	dc f3       	brlt	.-10     	; 0x153c <__mulsf3_pse+0x94>
    1546:	86 95       	lsr	r24
    1548:	77 95       	ror	r23
    154a:	67 95       	ror	r22
    154c:	b7 95       	ror	r27
    154e:	f7 95       	ror	r31
    1550:	e7 95       	ror	r30
    1552:	9f 5f       	subi	r25, 0xFF	; 255
    1554:	c1 f7       	brne	.-16     	; 0x1546 <__mulsf3_pse+0x9e>
    1556:	fe 2b       	or	r31, r30
    1558:	88 0f       	add	r24, r24
    155a:	91 1d       	adc	r25, r1
    155c:	96 95       	lsr	r25
    155e:	87 95       	ror	r24
    1560:	97 f9       	bld	r25, 7
    1562:	08 95       	ret

00001564 <pow>:
    1564:	fa 01       	movw	r30, r20
    1566:	ee 0f       	add	r30, r30
    1568:	ff 1f       	adc	r31, r31
    156a:	30 96       	adiw	r30, 0x00	; 0
    156c:	21 05       	cpc	r18, r1
    156e:	31 05       	cpc	r19, r1
    1570:	99 f1       	breq	.+102    	; 0x15d8 <pow+0x74>
    1572:	61 15       	cp	r22, r1
    1574:	71 05       	cpc	r23, r1
    1576:	61 f4       	brne	.+24     	; 0x1590 <pow+0x2c>
    1578:	80 38       	cpi	r24, 0x80	; 128
    157a:	bf e3       	ldi	r27, 0x3F	; 63
    157c:	9b 07       	cpc	r25, r27
    157e:	49 f1       	breq	.+82     	; 0x15d2 <pow+0x6e>
    1580:	68 94       	set
    1582:	90 38       	cpi	r25, 0x80	; 128
    1584:	81 05       	cpc	r24, r1
    1586:	61 f0       	breq	.+24     	; 0x15a0 <pow+0x3c>
    1588:	80 38       	cpi	r24, 0x80	; 128
    158a:	bf ef       	ldi	r27, 0xFF	; 255
    158c:	9b 07       	cpc	r25, r27
    158e:	41 f0       	breq	.+16     	; 0x15a0 <pow+0x3c>
    1590:	99 23       	and	r25, r25
    1592:	42 f5       	brpl	.+80     	; 0x15e4 <pow+0x80>
    1594:	ff 3f       	cpi	r31, 0xFF	; 255
    1596:	e1 05       	cpc	r30, r1
    1598:	31 05       	cpc	r19, r1
    159a:	21 05       	cpc	r18, r1
    159c:	11 f1       	breq	.+68     	; 0x15e2 <pow+0x7e>
    159e:	e8 94       	clt
    15a0:	08 94       	sec
    15a2:	e7 95       	ror	r30
    15a4:	d9 01       	movw	r26, r18
    15a6:	aa 23       	and	r26, r26
    15a8:	29 f4       	brne	.+10     	; 0x15b4 <pow+0x50>
    15aa:	ab 2f       	mov	r26, r27
    15ac:	be 2f       	mov	r27, r30
    15ae:	f8 5f       	subi	r31, 0xF8	; 248
    15b0:	d0 f3       	brcs	.-12     	; 0x15a6 <pow+0x42>
    15b2:	10 c0       	rjmp	.+32     	; 0x15d4 <pow+0x70>
    15b4:	ff 5f       	subi	r31, 0xFF	; 255
    15b6:	70 f4       	brcc	.+28     	; 0x15d4 <pow+0x70>
    15b8:	a6 95       	lsr	r26
    15ba:	e0 f7       	brcc	.-8      	; 0x15b4 <pow+0x50>
    15bc:	f7 39       	cpi	r31, 0x97	; 151
    15be:	50 f0       	brcs	.+20     	; 0x15d4 <pow+0x70>
    15c0:	19 f0       	breq	.+6      	; 0x15c8 <pow+0x64>
    15c2:	ff 3a       	cpi	r31, 0xAF	; 175
    15c4:	38 f4       	brcc	.+14     	; 0x15d4 <pow+0x70>
    15c6:	9f 77       	andi	r25, 0x7F	; 127
    15c8:	9f 93       	push	r25
    15ca:	0c d0       	rcall	.+24     	; 0x15e4 <pow+0x80>
    15cc:	0f 90       	pop	r0
    15ce:	07 fc       	sbrc	r0, 7
    15d0:	90 58       	subi	r25, 0x80	; 128
    15d2:	08 95       	ret
    15d4:	3e f0       	brts	.+14     	; 0x15e4 <pow+0x80>
    15d6:	10 cf       	rjmp	.-480    	; 0x13f8 <__fp_nan>
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	80 e8       	ldi	r24, 0x80	; 128
    15de:	9f e3       	ldi	r25, 0x3F	; 63
    15e0:	08 95       	ret
    15e2:	4f e7       	ldi	r20, 0x7F	; 127
    15e4:	9f 77       	andi	r25, 0x7F	; 127
    15e6:	5f 93       	push	r21
    15e8:	4f 93       	push	r20
    15ea:	3f 93       	push	r19
    15ec:	2f 93       	push	r18
    15ee:	e7 d0       	rcall	.+462    	; 0x17be <log>
    15f0:	2f 91       	pop	r18
    15f2:	3f 91       	pop	r19
    15f4:	4f 91       	pop	r20
    15f6:	5f 91       	pop	r21
    15f8:	4a df       	rcall	.-364    	; 0x148e <__mulsf3>
    15fa:	25 c0       	rjmp	.+74     	; 0x1646 <exp>

000015fc <round>:
    15fc:	27 df       	rcall	.-434    	; 0x144c <__fp_splitA>
    15fe:	e0 f0       	brcs	.+56     	; 0x1638 <round+0x3c>
    1600:	9e 37       	cpi	r25, 0x7E	; 126
    1602:	d8 f0       	brcs	.+54     	; 0x163a <round+0x3e>
    1604:	96 39       	cpi	r25, 0x96	; 150
    1606:	b8 f4       	brcc	.+46     	; 0x1636 <round+0x3a>
    1608:	9e 38       	cpi	r25, 0x8E	; 142
    160a:	48 f4       	brcc	.+18     	; 0x161e <round+0x22>
    160c:	67 2f       	mov	r22, r23
    160e:	78 2f       	mov	r23, r24
    1610:	88 27       	eor	r24, r24
    1612:	98 5f       	subi	r25, 0xF8	; 248
    1614:	f9 cf       	rjmp	.-14     	; 0x1608 <round+0xc>
    1616:	86 95       	lsr	r24
    1618:	77 95       	ror	r23
    161a:	67 95       	ror	r22
    161c:	93 95       	inc	r25
    161e:	95 39       	cpi	r25, 0x95	; 149
    1620:	d0 f3       	brcs	.-12     	; 0x1616 <round+0x1a>
    1622:	b6 2f       	mov	r27, r22
    1624:	b1 70       	andi	r27, 0x01	; 1
    1626:	6b 0f       	add	r22, r27
    1628:	71 1d       	adc	r23, r1
    162a:	81 1d       	adc	r24, r1
    162c:	20 f4       	brcc	.+8      	; 0x1636 <round+0x3a>
    162e:	87 95       	ror	r24
    1630:	77 95       	ror	r23
    1632:	67 95       	ror	r22
    1634:	93 95       	inc	r25
    1636:	33 c0       	rjmp	.+102    	; 0x169e <__fp_mintl>
    1638:	4d c0       	rjmp	.+154    	; 0x16d4 <__fp_mpack>
    163a:	23 cf       	rjmp	.-442    	; 0x1482 <__fp_szero>
    163c:	19 f4       	brne	.+6      	; 0x1644 <round+0x48>
    163e:	0e f0       	brts	.+2      	; 0x1642 <round+0x46>
    1640:	d5 ce       	rjmp	.-598    	; 0x13ec <__fp_inf>
    1642:	1e cf       	rjmp	.-452    	; 0x1480 <__fp_zero>
    1644:	d9 ce       	rjmp	.-590    	; 0x13f8 <__fp_nan>

00001646 <exp>:
    1646:	02 df       	rcall	.-508    	; 0x144c <__fp_splitA>
    1648:	c8 f3       	brcs	.-14     	; 0x163c <round+0x40>
    164a:	96 38       	cpi	r25, 0x86	; 134
    164c:	c0 f7       	brcc	.-16     	; 0x163e <round+0x42>
    164e:	07 f8       	bld	r0, 7
    1650:	0f 92       	push	r0
    1652:	e8 94       	clt
    1654:	2b e3       	ldi	r18, 0x3B	; 59
    1656:	3a ea       	ldi	r19, 0xAA	; 170
    1658:	48 eb       	ldi	r20, 0xB8	; 184
    165a:	5f e7       	ldi	r21, 0x7F	; 127
    165c:	25 df       	rcall	.-438    	; 0x14a8 <__mulsf3_pse>
    165e:	0f 92       	push	r0
    1660:	0f 92       	push	r0
    1662:	0f 92       	push	r0
    1664:	4d b7       	in	r20, 0x3d	; 61
    1666:	5e b7       	in	r21, 0x3e	; 62
    1668:	0f 92       	push	r0
    166a:	e9 d0       	rcall	.+466    	; 0x183e <modf>
    166c:	e4 e7       	ldi	r30, 0x74	; 116
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	3f d0       	rcall	.+126    	; 0x16f0 <__fp_powser>
    1672:	4f 91       	pop	r20
    1674:	5f 91       	pop	r21
    1676:	ef 91       	pop	r30
    1678:	ff 91       	pop	r31
    167a:	e5 95       	asr	r30
    167c:	ee 1f       	adc	r30, r30
    167e:	ff 1f       	adc	r31, r31
    1680:	49 f0       	breq	.+18     	; 0x1694 <exp+0x4e>
    1682:	fe 57       	subi	r31, 0x7E	; 126
    1684:	e0 68       	ori	r30, 0x80	; 128
    1686:	44 27       	eor	r20, r20
    1688:	ee 0f       	add	r30, r30
    168a:	44 1f       	adc	r20, r20
    168c:	fa 95       	dec	r31
    168e:	e1 f7       	brne	.-8      	; 0x1688 <exp+0x42>
    1690:	41 95       	neg	r20
    1692:	55 0b       	sbc	r21, r21
    1694:	5b d0       	rcall	.+182    	; 0x174c <ldexp>
    1696:	0f 90       	pop	r0
    1698:	07 fe       	sbrs	r0, 7
    169a:	4f c0       	rjmp	.+158    	; 0x173a <inverse>
    169c:	08 95       	ret

0000169e <__fp_mintl>:
    169e:	88 23       	and	r24, r24
    16a0:	71 f4       	brne	.+28     	; 0x16be <__fp_mintl+0x20>
    16a2:	77 23       	and	r23, r23
    16a4:	21 f0       	breq	.+8      	; 0x16ae <__fp_mintl+0x10>
    16a6:	98 50       	subi	r25, 0x08	; 8
    16a8:	87 2b       	or	r24, r23
    16aa:	76 2f       	mov	r23, r22
    16ac:	07 c0       	rjmp	.+14     	; 0x16bc <__fp_mintl+0x1e>
    16ae:	66 23       	and	r22, r22
    16b0:	11 f4       	brne	.+4      	; 0x16b6 <__fp_mintl+0x18>
    16b2:	99 27       	eor	r25, r25
    16b4:	0d c0       	rjmp	.+26     	; 0x16d0 <__fp_mintl+0x32>
    16b6:	90 51       	subi	r25, 0x10	; 16
    16b8:	86 2b       	or	r24, r22
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	2a f0       	brmi	.+10     	; 0x16ca <__fp_mintl+0x2c>
    16c0:	9a 95       	dec	r25
    16c2:	66 0f       	add	r22, r22
    16c4:	77 1f       	adc	r23, r23
    16c6:	88 1f       	adc	r24, r24
    16c8:	da f7       	brpl	.-10     	; 0x16c0 <__fp_mintl+0x22>
    16ca:	88 0f       	add	r24, r24
    16cc:	96 95       	lsr	r25
    16ce:	87 95       	ror	r24
    16d0:	97 f9       	bld	r25, 7
    16d2:	08 95       	ret

000016d4 <__fp_mpack>:
    16d4:	9f 3f       	cpi	r25, 0xFF	; 255
    16d6:	31 f0       	breq	.+12     	; 0x16e4 <__fp_mpack_finite+0xc>

000016d8 <__fp_mpack_finite>:
    16d8:	91 50       	subi	r25, 0x01	; 1
    16da:	20 f4       	brcc	.+8      	; 0x16e4 <__fp_mpack_finite+0xc>
    16dc:	87 95       	ror	r24
    16de:	77 95       	ror	r23
    16e0:	67 95       	ror	r22
    16e2:	b7 95       	ror	r27
    16e4:	88 0f       	add	r24, r24
    16e6:	91 1d       	adc	r25, r1
    16e8:	96 95       	lsr	r25
    16ea:	87 95       	ror	r24
    16ec:	97 f9       	bld	r25, 7
    16ee:	08 95       	ret

000016f0 <__fp_powser>:
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	1f 93       	push	r17
    16f6:	0f 93       	push	r16
    16f8:	ff 92       	push	r15
    16fa:	ef 92       	push	r14
    16fc:	df 92       	push	r13
    16fe:	7b 01       	movw	r14, r22
    1700:	8c 01       	movw	r16, r24
    1702:	68 94       	set
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <__fp_powser+0x20>
    1706:	da 2e       	mov	r13, r26
    1708:	ef 01       	movw	r28, r30
    170a:	cc de       	rcall	.-616    	; 0x14a4 <__mulsf3x>
    170c:	fe 01       	movw	r30, r28
    170e:	e8 94       	clt
    1710:	a5 91       	lpm	r26, Z+
    1712:	25 91       	lpm	r18, Z+
    1714:	35 91       	lpm	r19, Z+
    1716:	45 91       	lpm	r20, Z+
    1718:	55 91       	lpm	r21, Z+
    171a:	ae f3       	brts	.-22     	; 0x1706 <__fp_powser+0x16>
    171c:	ef 01       	movw	r28, r30
    171e:	d4 d0       	rcall	.+424    	; 0x18c8 <__addsf3x>
    1720:	fe 01       	movw	r30, r28
    1722:	97 01       	movw	r18, r14
    1724:	a8 01       	movw	r20, r16
    1726:	da 94       	dec	r13
    1728:	79 f7       	brne	.-34     	; 0x1708 <__fp_powser+0x18>
    172a:	df 90       	pop	r13
    172c:	ef 90       	pop	r14
    172e:	ff 90       	pop	r15
    1730:	0f 91       	pop	r16
    1732:	1f 91       	pop	r17
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <inverse>:
    173a:	9b 01       	movw	r18, r22
    173c:	ac 01       	movw	r20, r24
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	80 e8       	ldi	r24, 0x80	; 128
    1744:	9f e3       	ldi	r25, 0x3F	; 63
    1746:	81 cd       	rjmp	.-1278   	; 0x124a <__divsf3>
    1748:	51 ce       	rjmp	.-862    	; 0x13ec <__fp_inf>
    174a:	c4 cf       	rjmp	.-120    	; 0x16d4 <__fp_mpack>

0000174c <ldexp>:
    174c:	7f de       	rcall	.-770    	; 0x144c <__fp_splitA>
    174e:	e8 f3       	brcs	.-6      	; 0x174a <inverse+0x10>
    1750:	99 23       	and	r25, r25
    1752:	d9 f3       	breq	.-10     	; 0x174a <inverse+0x10>
    1754:	94 0f       	add	r25, r20
    1756:	51 1d       	adc	r21, r1
    1758:	bb f3       	brvs	.-18     	; 0x1748 <inverse+0xe>
    175a:	91 50       	subi	r25, 0x01	; 1
    175c:	50 40       	sbci	r21, 0x00	; 0
    175e:	94 f0       	brlt	.+36     	; 0x1784 <ldexp+0x38>
    1760:	59 f0       	breq	.+22     	; 0x1778 <ldexp+0x2c>
    1762:	88 23       	and	r24, r24
    1764:	32 f0       	brmi	.+12     	; 0x1772 <ldexp+0x26>
    1766:	66 0f       	add	r22, r22
    1768:	77 1f       	adc	r23, r23
    176a:	88 1f       	adc	r24, r24
    176c:	91 50       	subi	r25, 0x01	; 1
    176e:	50 40       	sbci	r21, 0x00	; 0
    1770:	c1 f7       	brne	.-16     	; 0x1762 <ldexp+0x16>
    1772:	9e 3f       	cpi	r25, 0xFE	; 254
    1774:	51 05       	cpc	r21, r1
    1776:	44 f7       	brge	.-48     	; 0x1748 <inverse+0xe>
    1778:	88 0f       	add	r24, r24
    177a:	91 1d       	adc	r25, r1
    177c:	96 95       	lsr	r25
    177e:	87 95       	ror	r24
    1780:	97 f9       	bld	r25, 7
    1782:	08 95       	ret
    1784:	5f 3f       	cpi	r21, 0xFF	; 255
    1786:	ac f0       	brlt	.+42     	; 0x17b2 <ldexp+0x66>
    1788:	98 3e       	cpi	r25, 0xE8	; 232
    178a:	9c f0       	brlt	.+38     	; 0x17b2 <ldexp+0x66>
    178c:	bb 27       	eor	r27, r27
    178e:	86 95       	lsr	r24
    1790:	77 95       	ror	r23
    1792:	67 95       	ror	r22
    1794:	b7 95       	ror	r27
    1796:	08 f4       	brcc	.+2      	; 0x179a <ldexp+0x4e>
    1798:	b1 60       	ori	r27, 0x01	; 1
    179a:	93 95       	inc	r25
    179c:	c1 f7       	brne	.-16     	; 0x178e <ldexp+0x42>
    179e:	bb 0f       	add	r27, r27
    17a0:	58 f7       	brcc	.-42     	; 0x1778 <ldexp+0x2c>
    17a2:	11 f4       	brne	.+4      	; 0x17a8 <ldexp+0x5c>
    17a4:	60 ff       	sbrs	r22, 0
    17a6:	e8 cf       	rjmp	.-48     	; 0x1778 <ldexp+0x2c>
    17a8:	6f 5f       	subi	r22, 0xFF	; 255
    17aa:	7f 4f       	sbci	r23, 0xFF	; 255
    17ac:	8f 4f       	sbci	r24, 0xFF	; 255
    17ae:	9f 4f       	sbci	r25, 0xFF	; 255
    17b0:	e3 cf       	rjmp	.-58     	; 0x1778 <ldexp+0x2c>
    17b2:	67 ce       	rjmp	.-818    	; 0x1482 <__fp_szero>
    17b4:	0e f0       	brts	.+2      	; 0x17b8 <ldexp+0x6c>
    17b6:	8e cf       	rjmp	.-228    	; 0x16d4 <__fp_mpack>
    17b8:	1f ce       	rjmp	.-962    	; 0x13f8 <__fp_nan>
    17ba:	68 94       	set
    17bc:	17 ce       	rjmp	.-978    	; 0x13ec <__fp_inf>

000017be <log>:
    17be:	46 de       	rcall	.-884    	; 0x144c <__fp_splitA>
    17c0:	c8 f3       	brcs	.-14     	; 0x17b4 <ldexp+0x68>
    17c2:	99 23       	and	r25, r25
    17c4:	d1 f3       	breq	.-12     	; 0x17ba <ldexp+0x6e>
    17c6:	c6 f3       	brts	.-16     	; 0x17b8 <ldexp+0x6c>
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	1f 93       	push	r17
    17ce:	0f 93       	push	r16
    17d0:	ff 92       	push	r15
    17d2:	c9 2f       	mov	r28, r25
    17d4:	dd 27       	eor	r29, r29
    17d6:	88 23       	and	r24, r24
    17d8:	2a f0       	brmi	.+10     	; 0x17e4 <log+0x26>
    17da:	21 97       	sbiw	r28, 0x01	; 1
    17dc:	66 0f       	add	r22, r22
    17de:	77 1f       	adc	r23, r23
    17e0:	88 1f       	adc	r24, r24
    17e2:	da f7       	brpl	.-10     	; 0x17da <log+0x1c>
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e8       	ldi	r20, 0x80	; 128
    17ea:	5f eb       	ldi	r21, 0xBF	; 191
    17ec:	9f e3       	ldi	r25, 0x3F	; 63
    17ee:	88 39       	cpi	r24, 0x98	; 152
    17f0:	20 f0       	brcs	.+8      	; 0x17fa <log+0x3c>
    17f2:	80 3e       	cpi	r24, 0xE0	; 224
    17f4:	30 f0       	brcs	.+12     	; 0x1802 <log+0x44>
    17f6:	21 96       	adiw	r28, 0x01	; 1
    17f8:	8f 77       	andi	r24, 0x7F	; 127
    17fa:	55 d0       	rcall	.+170    	; 0x18a6 <__addsf3>
    17fc:	ec e9       	ldi	r30, 0x9C	; 156
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	03 c0       	rjmp	.+6      	; 0x1808 <log+0x4a>
    1802:	51 d0       	rcall	.+162    	; 0x18a6 <__addsf3>
    1804:	e9 ec       	ldi	r30, 0xC9	; 201
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	73 df       	rcall	.-282    	; 0x16f0 <__fp_powser>
    180a:	8b 01       	movw	r16, r22
    180c:	be 01       	movw	r22, r28
    180e:	ec 01       	movw	r28, r24
    1810:	fb 2e       	mov	r15, r27
    1812:	6f 57       	subi	r22, 0x7F	; 127
    1814:	71 09       	sbc	r23, r1
    1816:	75 95       	asr	r23
    1818:	77 1f       	adc	r23, r23
    181a:	88 0b       	sbc	r24, r24
    181c:	99 0b       	sbc	r25, r25
    181e:	ab dd       	rcall	.-1194   	; 0x1376 <__floatsisf>
    1820:	28 e1       	ldi	r18, 0x18	; 24
    1822:	32 e7       	ldi	r19, 0x72	; 114
    1824:	41 e3       	ldi	r20, 0x31	; 49
    1826:	5f e3       	ldi	r21, 0x3F	; 63
    1828:	3d de       	rcall	.-902    	; 0x14a4 <__mulsf3x>
    182a:	af 2d       	mov	r26, r15
    182c:	98 01       	movw	r18, r16
    182e:	ae 01       	movw	r20, r28
    1830:	ff 90       	pop	r15
    1832:	0f 91       	pop	r16
    1834:	1f 91       	pop	r17
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	46 d0       	rcall	.+140    	; 0x18c8 <__addsf3x>
    183c:	ee cd       	rjmp	.-1060   	; 0x141a <__fp_round>

0000183e <modf>:
    183e:	fa 01       	movw	r30, r20
    1840:	dc 01       	movw	r26, r24
    1842:	aa 0f       	add	r26, r26
    1844:	bb 1f       	adc	r27, r27
    1846:	9b 01       	movw	r18, r22
    1848:	ac 01       	movw	r20, r24
    184a:	bf 57       	subi	r27, 0x7F	; 127
    184c:	28 f4       	brcc	.+10     	; 0x1858 <modf+0x1a>
    184e:	22 27       	eor	r18, r18
    1850:	33 27       	eor	r19, r19
    1852:	44 27       	eor	r20, r20
    1854:	50 78       	andi	r21, 0x80	; 128
    1856:	1f c0       	rjmp	.+62     	; 0x1896 <modf+0x58>
    1858:	b7 51       	subi	r27, 0x17	; 23
    185a:	88 f4       	brcc	.+34     	; 0x187e <modf+0x40>
    185c:	ab 2f       	mov	r26, r27
    185e:	00 24       	eor	r0, r0
    1860:	46 95       	lsr	r20
    1862:	37 95       	ror	r19
    1864:	27 95       	ror	r18
    1866:	01 1c       	adc	r0, r1
    1868:	a3 95       	inc	r26
    186a:	d2 f3       	brmi	.-12     	; 0x1860 <modf+0x22>
    186c:	00 20       	and	r0, r0
    186e:	69 f0       	breq	.+26     	; 0x188a <modf+0x4c>
    1870:	22 0f       	add	r18, r18
    1872:	33 1f       	adc	r19, r19
    1874:	44 1f       	adc	r20, r20
    1876:	b3 95       	inc	r27
    1878:	da f3       	brmi	.-10     	; 0x1870 <modf+0x32>
    187a:	0d d0       	rcall	.+26     	; 0x1896 <modf+0x58>
    187c:	13 c0       	rjmp	.+38     	; 0x18a4 <__subsf3>
    187e:	61 30       	cpi	r22, 0x01	; 1
    1880:	71 05       	cpc	r23, r1
    1882:	a0 e8       	ldi	r26, 0x80	; 128
    1884:	8a 07       	cpc	r24, r26
    1886:	b9 46       	sbci	r27, 0x69	; 105
    1888:	30 f4       	brcc	.+12     	; 0x1896 <modf+0x58>
    188a:	9b 01       	movw	r18, r22
    188c:	ac 01       	movw	r20, r24
    188e:	66 27       	eor	r22, r22
    1890:	77 27       	eor	r23, r23
    1892:	88 27       	eor	r24, r24
    1894:	90 78       	andi	r25, 0x80	; 128
    1896:	30 96       	adiw	r30, 0x00	; 0
    1898:	21 f0       	breq	.+8      	; 0x18a2 <modf+0x64>
    189a:	20 83       	st	Z, r18
    189c:	31 83       	std	Z+1, r19	; 0x01
    189e:	42 83       	std	Z+2, r20	; 0x02
    18a0:	53 83       	std	Z+3, r21	; 0x03
    18a2:	08 95       	ret

000018a4 <__subsf3>:
    18a4:	50 58       	subi	r21, 0x80	; 128

000018a6 <__addsf3>:
    18a6:	bb 27       	eor	r27, r27
    18a8:	aa 27       	eor	r26, r26
    18aa:	0e d0       	rcall	.+28     	; 0x18c8 <__addsf3x>
    18ac:	b6 cd       	rjmp	.-1172   	; 0x141a <__fp_round>
    18ae:	a7 dd       	rcall	.-1202   	; 0x13fe <__fp_pscA>
    18b0:	30 f0       	brcs	.+12     	; 0x18be <__addsf3+0x18>
    18b2:	ac dd       	rcall	.-1192   	; 0x140c <__fp_pscB>
    18b4:	20 f0       	brcs	.+8      	; 0x18be <__addsf3+0x18>
    18b6:	31 f4       	brne	.+12     	; 0x18c4 <__addsf3+0x1e>
    18b8:	9f 3f       	cpi	r25, 0xFF	; 255
    18ba:	11 f4       	brne	.+4      	; 0x18c0 <__addsf3+0x1a>
    18bc:	1e f4       	brtc	.+6      	; 0x18c4 <__addsf3+0x1e>
    18be:	9c cd       	rjmp	.-1224   	; 0x13f8 <__fp_nan>
    18c0:	0e f4       	brtc	.+2      	; 0x18c4 <__addsf3+0x1e>
    18c2:	e0 95       	com	r30
    18c4:	e7 fb       	bst	r30, 7
    18c6:	92 cd       	rjmp	.-1244   	; 0x13ec <__fp_inf>

000018c8 <__addsf3x>:
    18c8:	e9 2f       	mov	r30, r25
    18ca:	b8 dd       	rcall	.-1168   	; 0x143c <__fp_split3>
    18cc:	80 f3       	brcs	.-32     	; 0x18ae <__addsf3+0x8>
    18ce:	ba 17       	cp	r27, r26
    18d0:	62 07       	cpc	r22, r18
    18d2:	73 07       	cpc	r23, r19
    18d4:	84 07       	cpc	r24, r20
    18d6:	95 07       	cpc	r25, r21
    18d8:	18 f0       	brcs	.+6      	; 0x18e0 <__addsf3x+0x18>
    18da:	71 f4       	brne	.+28     	; 0x18f8 <__addsf3x+0x30>
    18dc:	9e f5       	brtc	.+102    	; 0x1944 <__addsf3x+0x7c>
    18de:	d0 cd       	rjmp	.-1120   	; 0x1480 <__fp_zero>
    18e0:	0e f4       	brtc	.+2      	; 0x18e4 <__addsf3x+0x1c>
    18e2:	e0 95       	com	r30
    18e4:	0b 2e       	mov	r0, r27
    18e6:	ba 2f       	mov	r27, r26
    18e8:	a0 2d       	mov	r26, r0
    18ea:	0b 01       	movw	r0, r22
    18ec:	b9 01       	movw	r22, r18
    18ee:	90 01       	movw	r18, r0
    18f0:	0c 01       	movw	r0, r24
    18f2:	ca 01       	movw	r24, r20
    18f4:	a0 01       	movw	r20, r0
    18f6:	11 24       	eor	r1, r1
    18f8:	ff 27       	eor	r31, r31
    18fa:	59 1b       	sub	r21, r25
    18fc:	99 f0       	breq	.+38     	; 0x1924 <__addsf3x+0x5c>
    18fe:	59 3f       	cpi	r21, 0xF9	; 249
    1900:	50 f4       	brcc	.+20     	; 0x1916 <__addsf3x+0x4e>
    1902:	50 3e       	cpi	r21, 0xE0	; 224
    1904:	68 f1       	brcs	.+90     	; 0x1960 <__addsf3x+0x98>
    1906:	1a 16       	cp	r1, r26
    1908:	f0 40       	sbci	r31, 0x00	; 0
    190a:	a2 2f       	mov	r26, r18
    190c:	23 2f       	mov	r18, r19
    190e:	34 2f       	mov	r19, r20
    1910:	44 27       	eor	r20, r20
    1912:	58 5f       	subi	r21, 0xF8	; 248
    1914:	f3 cf       	rjmp	.-26     	; 0x18fc <__addsf3x+0x34>
    1916:	46 95       	lsr	r20
    1918:	37 95       	ror	r19
    191a:	27 95       	ror	r18
    191c:	a7 95       	ror	r26
    191e:	f0 40       	sbci	r31, 0x00	; 0
    1920:	53 95       	inc	r21
    1922:	c9 f7       	brne	.-14     	; 0x1916 <__addsf3x+0x4e>
    1924:	7e f4       	brtc	.+30     	; 0x1944 <__addsf3x+0x7c>
    1926:	1f 16       	cp	r1, r31
    1928:	ba 0b       	sbc	r27, r26
    192a:	62 0b       	sbc	r22, r18
    192c:	73 0b       	sbc	r23, r19
    192e:	84 0b       	sbc	r24, r20
    1930:	ba f0       	brmi	.+46     	; 0x1960 <__addsf3x+0x98>
    1932:	91 50       	subi	r25, 0x01	; 1
    1934:	a1 f0       	breq	.+40     	; 0x195e <__addsf3x+0x96>
    1936:	ff 0f       	add	r31, r31
    1938:	bb 1f       	adc	r27, r27
    193a:	66 1f       	adc	r22, r22
    193c:	77 1f       	adc	r23, r23
    193e:	88 1f       	adc	r24, r24
    1940:	c2 f7       	brpl	.-16     	; 0x1932 <__addsf3x+0x6a>
    1942:	0e c0       	rjmp	.+28     	; 0x1960 <__addsf3x+0x98>
    1944:	ba 0f       	add	r27, r26
    1946:	62 1f       	adc	r22, r18
    1948:	73 1f       	adc	r23, r19
    194a:	84 1f       	adc	r24, r20
    194c:	48 f4       	brcc	.+18     	; 0x1960 <__addsf3x+0x98>
    194e:	87 95       	ror	r24
    1950:	77 95       	ror	r23
    1952:	67 95       	ror	r22
    1954:	b7 95       	ror	r27
    1956:	f7 95       	ror	r31
    1958:	9e 3f       	cpi	r25, 0xFE	; 254
    195a:	08 f0       	brcs	.+2      	; 0x195e <__addsf3x+0x96>
    195c:	b3 cf       	rjmp	.-154    	; 0x18c4 <__addsf3+0x1e>
    195e:	93 95       	inc	r25
    1960:	88 0f       	add	r24, r24
    1962:	08 f0       	brcs	.+2      	; 0x1966 <__addsf3x+0x9e>
    1964:	99 27       	eor	r25, r25
    1966:	ee 0f       	add	r30, r30
    1968:	97 95       	ror	r25
    196a:	87 95       	ror	r24
    196c:	08 95       	ret

0000196e <__udivmodqi4>:
    196e:	99 1b       	sub	r25, r25
    1970:	79 e0       	ldi	r23, 0x09	; 9
    1972:	04 c0       	rjmp	.+8      	; 0x197c <__udivmodqi4_ep>

00001974 <__udivmodqi4_loop>:
    1974:	99 1f       	adc	r25, r25
    1976:	96 17       	cp	r25, r22
    1978:	08 f0       	brcs	.+2      	; 0x197c <__udivmodqi4_ep>
    197a:	96 1b       	sub	r25, r22

0000197c <__udivmodqi4_ep>:
    197c:	88 1f       	adc	r24, r24
    197e:	7a 95       	dec	r23
    1980:	c9 f7       	brne	.-14     	; 0x1974 <__udivmodqi4_loop>
    1982:	80 95       	com	r24
    1984:	08 95       	ret

00001986 <_exit>:
    1986:	f8 94       	cli

00001988 <__stop_program>:
    1988:	ff cf       	rjmp	.-2      	; 0x1988 <__stop_program>
